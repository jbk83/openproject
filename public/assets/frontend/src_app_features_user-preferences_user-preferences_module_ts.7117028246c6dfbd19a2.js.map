{"version":3,"mappings":"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","names":["N","q","constructor","super","autoHidePopups","commentSortDescending","hideMail","timeZone","warnOnLeavingUnsaved","notifications","dailyReminders","enabled","times","workdays","immediateReminders","mentioned","pauseReminders","Q","name","i","this","select","notificationSettings$","pipe","d","t","filter","o","_links","project","href","_","groupBy","title","find","U","Set","map","r","dailyReminders$","K","store","get","setLoading","preferenceAPI","subscribe","update","toastService","addError","add","patch","addSuccess","I18n","apiV3Service","users","id","preferences","m","e","factory","storeService","query","projectNotifications$","removeAll","w","selectors","add_setting","please_select","already_selected","userId","selectProject","selected","emit","active","mapProjectsFn","Object","disabled","settings","controls","value","disabledReason","text","T","notify_me","save","mentioned_header","description","involved_header","watched_header","work_package_commented_header","work_package_created_header","work_package_processed_header","work_package_prioritized_header","work_package_scheduled_header","remove_project_settings","projectLink","pathHelper","projectPath","te","addProjectSettings","push","s","involved","workPackageCreated","workPackageProcessed","workPackageScheduled","workPackagePrioritized","workPackageCommented","removeProjectSettings","removeAt","C","M","a","projectSettings","notifyImmediately","alsoNotifyFor","watched","work_package_commented","work_package_created","work_package_processed","work_package_prioritized","work_package_scheduled","projectSpecific","ngOnInit","uiRouterGlobals","params","currentUserService","user$","notificationsForGlobal$","untilDestroyed","form","setValue","l","u","clear","sort","localeCompare","forEach","setControl","changeDetectorRef","detectChanges","saveChanges","getValue","newsAdded","newsCommented","documentAdded","forumMessages","wikiPageAdded","wikiPageUpdated","membershipAdded","membershipUpdated","y","Y","explanation","rootFormGroup","control","I","j","k","setupAvailableTimes","S","no_time_zone","configurationService","isTimezoneSet","timeLabel","counter","addTime","enable","enabled$","valueChanges","selectedTimes$","inactiveTimes","position","splice","time","G","timeRemovable$","O","length","nonAddable$","availableTimes","activeTimes$","firstAvailableSuggested","firstAfterSelected","storeTimes","concat","changeTime","isActive","removeTime","shift","toggleActive","toTime","dateForHour","parseInt","split","isDisabled","includes","emitEvent","suggestedTimes","indexOf","Array","from","toLocaleTimeString","hour12","hour","minute","Date","setTime","label","date_placeholder","first_day","last_day","selectedDates$","firstDay","lastDay","setDates","patchValue","A","E","x","buildISOWeekdays","formGroup","indexOfLocalWorkday","isoWorkdays","controlForLocalWorkday","at","fb","group","array","emailAlerts","n","D","globalNotification$","selectLoading","buildForm","g","h","formInitialized","cdRef","v","buildWorkdays","buildPauses","reduce","Pe","url","component","Z","imports","p","W","B","z","states"],"sources":["./src/app/features/user-preferences/state/user-preferences.store.ts","./src/app/features/user-preferences/state/user-preferences.query.ts","./src/app/features/user-preferences/state/user-preferences.service.ts","./src/app/features/user-preferences/notifications-settings/toolbar/notifications-settings-toolbar.component.ts","./src/app/features/user-preferences/notifications-settings/toolbar/notifications-settings-toolbar.component.html","./src/app/features/user-preferences/notifications-settings/inline-create/notification-setting-inline-create.component.html","./src/app/features/user-preferences/notifications-settings/inline-create/notification-setting-inline-create.component.ts","./src/app/features/user-preferences/notifications-settings/table/notification-settings-table.component.html","./src/app/features/user-preferences/notifications-settings/table/notification-settings-table.component.ts","./src/app/features/user-preferences/notifications-settings/page/notifications-settings-page.component.html","./src/app/features/user-preferences/notifications-settings/page/notifications-settings-page.component.ts","./src/app/features/user-preferences/reminder-settings/email-alerts/email-alerts-settings.component.html","./src/app/features/user-preferences/reminder-settings/email-alerts/email-alerts-settings.component.ts","./src/app/features/user-preferences/reminder-settings/immediate-reminders/immediate-reminder-settings.component.ts","./src/app/features/user-preferences/reminder-settings/immediate-reminders/immediate-reminder-settings.component.html","./src/app/features/user-preferences/reminder-settings/reminder-time/reminder-settings-daily-time.component.html","./src/app/features/user-preferences/reminder-settings/reminder-time/reminder-settings-daily-time.component.ts","./src/app/features/user-preferences/reminder-settings/pause-reminders/pause-reminders.component.ts","./src/app/features/user-preferences/reminder-settings/workdays/workdays-settings.component.html","./src/app/features/user-preferences/reminder-settings/pause-reminders/pause-reminders.component.html","./src/app/features/user-preferences/reminder-settings/workdays/workdays-settings.component.ts","./src/app/features/user-preferences/reminder-settings/page/reminder-settings-page.component.html","./src/app/features/user-preferences/reminder-settings/page/reminder-settings-page.component.ts","./src/app/shared/helpers/rxjs/filterWith.ts","./src/app/features/user-preferences/user-preferences.routes.ts","./src/app/features/user-preferences/user-preferences.module.ts"],"sourcesContent":["// -- copyright\n// OpenProject is an open source project management software.\n// Copyright (C) 2012-2022 the OpenProject GmbH\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License version 3.\n//\n// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:\n// Copyright (C) 2006-2013 Jean-Philippe Lang\n// Copyright (C) 2010-2013 the ChiliProject Team\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License\n// as published by the Free Software Foundation; either version 2\n// of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n//\n// See COPYRIGHT and LICENSE files for more details.\n//++\n\nimport {\n  Store,\n  StoreConfig,\n} from '@datorama/akita';\nimport { IUserPreference } from 'core-app/features/user-preferences/state/user-preferences.model';\n\nfunction createInitialState():IUserPreference {\n  return {\n    autoHidePopups: true,\n    commentSortDescending: false,\n    hideMail: true,\n    timeZone: null,\n    warnOnLeavingUnsaved: true,\n    notifications: [],\n    dailyReminders: {\n      enabled: true,\n      times: ['08:00'],\n    },\n    workdays: [],\n    immediateReminders: {\n      mentioned: false,\n    },\n    pauseReminders: {\n      enabled: false,\n    },\n  };\n}\n\n@StoreConfig({ name: 'notification-settings' })\nexport class UserPreferencesStore extends Store<IUserPreference> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Query } from '@datorama/akita';\nimport {\n  filter,\n  map,\n} from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { UserPreferencesStore } from 'core-app/features/user-preferences/state/user-preferences.store';\nimport { IUserPreference } from 'core-app/features/user-preferences/state/user-preferences.model';\nimport { INotificationSetting } from 'core-app/features/user-preferences/state/notification-setting.model';\n\nexport class UserPreferencesQuery extends Query<IUserPreference> {\n  notificationSettings$ = this.select('notifications');\n\n  notificationsGroupedByProject$:Observable<{ [key:string]:INotificationSetting[] }> = this\n    .notificationSettings$\n    .pipe(\n      map((settings) => settings.filter((setting) => setting._links.project.href)),\n      map((settings) => _.groupBy(settings, (setting) => setting._links.project.title)),\n    );\n\n  /** Notification settings grouped by Project */\n  notificationsForGlobal$:Observable<INotificationSetting|undefined> = this\n    .notificationSettings$\n    .pipe(\n      map((notifications) => notifications.find((setting) => setting._links.project.href === null)),\n    );\n\n  projectNotifications$ = this\n    .notificationSettings$\n    .pipe(\n      map((settings) => settings.filter((setting) => setting._links.project.href !== null)),\n    );\n\n  globalNotification$ = this\n    .notificationSettings$\n    .pipe(\n      map((settings) => settings.find((notification) => !notification._links.project.href)),\n      filter((global) => !!global),\n    ) as Observable<INotificationSetting>;\n\n  /** Selected projects */\n  selectedProjects$ = this\n    .notificationSettings$\n    .pipe(\n      map((notifications) => (\n        new Set(notifications.map((setting) => setting._links.project?.href))\n      )),\n    );\n\n  /** All daily reminders settings */\n  dailyReminders$ = this.select('dailyReminders');\n\n  dailyRemindersEnabled$ = this\n    .dailyReminders$\n    .pipe(\n      map((reminders) => reminders.enabled),\n    );\n\n  dailyRemindersTimes$ = this\n    .dailyReminders$\n    .pipe(\n      map((reminders) => reminders.times),\n    );\n\n  preferences$ = this.select();\n\n  constructor(protected store:UserPreferencesStore) {\n    super(store);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ApiV3Service } from 'core-app/core/apiv3/api-v3.service';\nimport { ToastService } from 'core-app/shared/components/toaster/toast.service';\nimport { ApiV3UserPreferencesPaths } from 'core-app/core/apiv3/endpoints/users/apiv3-user-preferences-paths';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { IUserPreference } from 'core-app/features/user-preferences/state/user-preferences.model';\nimport { UserPreferencesStore } from 'core-app/features/user-preferences/state/user-preferences.store';\nimport { UserPreferencesQuery } from 'core-app/features/user-preferences/state/user-preferences.query';\n\n@Injectable({ providedIn: 'root' })\nexport class UserPreferencesService {\n  readonly store = new UserPreferencesStore();\n\n  readonly query = new UserPreferencesQuery(this.store);\n\n  constructor(\n    private apiV3Service:ApiV3Service,\n    private toastService:ToastService,\n    private I18n:I18nService,\n  ) {\n  }\n\n  get(user:string):void {\n    this.store.setLoading(true);\n    this.preferenceAPI(user)\n      .get()\n      .subscribe(\n        (prefs) => this.store.update(prefs),\n        (error) => this.toastService.addError(error),\n      )\n      .add(\n        () => this.store.setLoading(false),\n      );\n  }\n\n  update(user:string, delta:Partial<IUserPreference>):void {\n    this.store.setLoading(true);\n    this\n      .preferenceAPI(user)\n      .patch(delta)\n      .subscribe(\n        (prefs) => {\n          this.store.update(prefs);\n          this.toastService.addSuccess(this.I18n.t('js.notice_successful_update'));\n        },\n        (error) => this.toastService.addError(error),\n      )\n      .add(() => this.store.setLoading(false));\n  }\n\n  private preferenceAPI(user:string):ApiV3UserPreferencesPaths {\n    return this\n      .apiV3Service\n      .users\n      .id(user)\n      .preferences;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { UserPreferencesService } from 'core-app/features/user-preferences/state/user-preferences.service';\n\n@Component({\n  selector: 'op-notifications-settings-toolbar',\n  templateUrl: './notifications-settings-toolbar.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationsSettingsToolbarComponent {\n  projectSettings$ = this.storeService.query.projectNotifications$;\n\n  text = {\n    title: this.I18n.t('js.notifications.settings.title'),\n  };\n\n  constructor(\n    private storeService:UserPreferencesService,\n    private I18n:I18nService,\n  ) {\n  }\n\n  removeAll():void {\n    this.storeService.store.update(\n      ({ notifications }) => ({\n        notifications: notifications.filter((notification) => notification._links.project.href === null),\n      }),\n    );\n  }\n}\n","<div class=\"toolbar-container\">\n  <div class=\"toolbar\">\n    <div class=\"title-container\">\n      <h2 [textContent]=\"text.title\"></h2>\n    </div>\n  </div>\n</div>\n","<div class=\"wp-inline-create-button\">\n  <button\n      *ngIf=\"!active\"\n      (click)=\"active = true\"\n      class=\"spot-link\"\n      type=\"button\"\n  >\n    <span class=\"spot-icon spot-icon_add\"></span>\n    <span [textContent]=\"text.add_setting\"></span>\n  </button>\n\n  <op-project-autocompleter\n    *ngIf=\"active\"\n\n    (valueChange)=\"selectProject($event)\"\n    (keydown.escape)=\"active = false\"\n\n    [apiFilters]=\"APIFilters\"\n    [mapResultsFn]=\"this.mapProjectsFn.bind(this)\"\n\n    [placeholder]=\"text.please_select\"\n    dropdownPosition=\"top\"\n  ></op-project-autocompleter>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { FormArray } from '@angular/forms';\nimport { ApiV3ListFilter } from 'core-app/core/apiv3/paths/apiv3-list-resource.interface';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { HalSourceLink } from 'core-app/features/hal/resources/hal-resource';\nimport { IProjectAutocompleteItem } from 'core-app/shared/components/autocompleter/project-autocompleter/project-autocomplete-item';\n\nexport interface NotificationSettingProjectOption {\n  name:string;\n  href:string;\n}\n\n@Component({\n  selector: 'op-notification-setting-inline-create',\n  templateUrl: './notification-setting-inline-create.component.html',\n  styleUrls: ['./notification-setting-inline-create.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationSettingInlineCreateComponent {\n  @Input() userId:string;\n\n  @Input() settings:FormArray;\n\n  @Output() selected = new EventEmitter<HalSourceLink>();\n\n  /** Active inline-create mode */\n  active = false;\n\n  text = {\n    add_setting: this.I18n.t('js.notifications.settings.project_specific.add'),\n    please_select: this.I18n.t('js.placeholders.selection'),\n    already_selected: this.I18n.t('js.notifications.settings.project_specific.already_selected'),\n  };\n\n  public get APIFilters():ApiV3ListFilter[] {\n    return [['visible', '=', [this.userId]]];\n  }\n\n  constructor(\n    private I18n:I18nService,\n  ) { }\n\n  selectProject($event:NotificationSettingProjectOption):void {\n    this.selected.emit({ title: $event.name, href: $event.href });\n    this.active = false;\n  }\n\n  public mapProjectsFn(projects:IProjectAutocompleteItem[]):IProjectAutocompleteItem[] {\n    return projects.map((project) => ({\n      ...project,\n      disabled: !!this.settings.controls.find(\n        (projectSetting) => (projectSetting.get('project')!.value as NotificationSettingProjectOption).href === project.href,\n      ),\n      disabledReason: this.text.already_selected,\n    }));\n  }\n}\n","<div\n  class=\"op-scrollable-table\"\n  *ngIf=\"settings.length > 0\"\n>\n  <table class=\"op-table\">\n    <thead>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_heading\">\n          {{ text.notify_me }}\n        </th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <th class=\"op-table--cell op-table--cell_heading\">\n            <a\n              class=\"spot-link\"\n              [href]=\"projectLink(item.controls.project.value.href)\"\n            >{{ item.controls.project.value.title }}</a>\n          </th>\n        </ng-container>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">\n          <h5>{{ text.mentioned_header.title }}</h5>\n          <p>{{ text.mentioned_header.description }}</p>\n        </th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\"><input type=\"checkbox\" disabled checked /></td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">\n          <h5>{{ text.involved_header.title }}</h5>\n          <p>{{ text.involved_header.description }}</p>\n        </th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\" [formGroup]=\"item\">\n            <input\n              type=\"checkbox\"\n              formControlName=\"involved\"\n              data-qa-project-notification-type=\"involved\" \n              [attr.data-qa-project]=\"item.controls.project.value.title\" \n            />\n          </td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">{{ text.watched_header }}</th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\"><input type=\"checkbox\" disabled checked /></td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">{{ text.work_package_created_header }}</th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\" [formGroup]=\"item\">\n            <input\n              type=\"checkbox\"\n              formControlName=\"workPackageCreated\"\n              data-qa-project-notification-type=\"work_package_created\" \n              [attr.data-qa-project]=\"item.controls.project.value.title\" \n            />\n          </td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">{{ text.work_package_processed_header }}</th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\" [formGroup]=\"item\">\n            <input\n              type=\"checkbox\"\n              formControlName=\"workPackageProcessed\"\n              data-qa-project-notification-type=\"work_package_processed\" \n              [attr.data-qa-project]=\"item.controls.project.value.title\" \n            />\n          </td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">{{ text.work_package_scheduled_header }}</th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\" [formGroup]=\"item\">\n            <input\n              type=\"checkbox\"\n              formControlName=\"workPackageScheduled\"\n              data-qa-project-notification-type=\"work_package_scheduled\" \n              [attr.data-qa-project]=\"item.controls.project.value.title\" \n            />\n          </td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">{{ text.work_package_prioritized_header }}</th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\" [formGroup]=\"item\">\n            <input\n              type=\"checkbox\"\n              formControlName=\"workPackagePrioritized\"\n              data-qa-project-notification-type=\"work_package_prioritized\" \n              [attr.data-qa-project]=\"item.controls.project.value.title\" \n            />\n          </td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">{{ text.work_package_commented_header }}</th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\" [formGroup]=\"item\">\n            <input\n              type=\"checkbox\"\n              formControlName=\"workPackageCommented\"\n              data-qa-project-notification-type=\"work_package_commented\" \n              [attr.data-qa-project]=\"item.controls.project.value.title\" \n            />\n          </td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\"></th>\n        <ng-container *ngFor=\"let item of settings.controls; let index = index\">\n          <td class=\"op-table--cell\">\n            <button\n              type=\"button\"\n              class=\"spot-link\"\n              (click)=\"removeProjectSettings(index)\"\n            >\n              {{ text.remove_project_settings }}\n            </button>\n          </td>\n        </ng-container>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<op-notification-setting-inline-create\n  *ngIf=\"userId\"\n  [userId]=\"userId\"\n  [settings]=\"settings\"\n  (selected)=\"addProjectSettings($event)\"\n  data-qa-selector=\"notification-setting-inline-create\"\n></op-notification-setting-inline-create>\n","// noinspection ES6UnusedImports\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n} from '@angular/core';\nimport { FormArray, FormGroup, FormControl } from '@angular/forms';\nimport { PathHelperService } from 'core-app/core/path-helper/path-helper.service';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport idFromLink from 'core-app/features/hal/helpers/id-from-link';\nimport { UserPreferencesService } from 'core-app/features/user-preferences/state/user-preferences.service';\nimport { HalSourceLink } from 'core-app/features/hal/resources/hal-resource';\n\n@Component({\n  selector: 'op-notification-settings-table',\n  templateUrl: './notification-settings-table.component.html',\n  styleUrls: ['./notification-settings-table.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationSettingsTableComponent {\n  @Input() userId:string;\n\n  @Input() settings:FormArray;\n\n  text = {\n    notify_me: this.I18n.t('js.notifications.settings.notify_me'),\n    save: this.I18n.t('js.button_save'),\n    mentioned_header: {\n      title: this.I18n.t('js.notifications.settings.reasons.mentioned.title'),\n      description: this.I18n.t('js.notifications.settings.reasons.mentioned.description'),\n    },\n    involved_header: {\n      title: this.I18n.t('js.notifications.settings.reasons.involved.title'),\n      description: this.I18n.t('js.notifications.settings.reasons.involved.description'),\n    },\n    watched_header: this.I18n.t('js.notifications.settings.reasons.watched'),\n    work_package_commented_header: this.I18n.t('js.notifications.settings.reasons.work_package_commented'),\n    work_package_created_header: this.I18n.t('js.notifications.settings.reasons.work_package_created'),\n    work_package_processed_header: this.I18n.t('js.notifications.settings.reasons.work_package_processed'),\n    work_package_prioritized_header: this.I18n.t('js.notifications.settings.reasons.work_package_prioritized'),\n    work_package_scheduled_header: this.I18n.t('js.notifications.settings.reasons.work_package_scheduled'),\n    remove_project_settings: this.I18n.t('js.notifications.settings.project_specific.remove'),\n  };\n\n  constructor(\n    private I18n:I18nService,\n    private pathHelper:PathHelperService,\n  ) {}\n\n  projectLink(href:string) {\n    return this.pathHelper.projectPath(idFromLink(href));\n  }\n\n  addProjectSettings(project:HalSourceLink):void {\n    this.settings.push(new FormGroup({\n      project: new FormControl(project),\n      involved: new FormControl(false),\n      workPackageCreated: new FormControl(false),\n      workPackageProcessed: new FormControl(false),\n      workPackageScheduled: new FormControl(false),\n      workPackagePrioritized: new FormControl(false),\n      workPackageCommented: new FormControl(false),\n    }));\n  }\n\n  removeProjectSettings(index:number):void {\n    this.settings.removeAt(index);\n  }\n}\n","<op-notifications-settings-toolbar></op-notifications-settings-toolbar>\n<form\n  [formGroup]=\"form\"\n  (ngSubmit)=\"saveChanges()\"\n  class=\"op-form\"\n>\n  <h5>{{ text.notifyImmediately.title }}</h5>\n  <p>{{ text.notifyImmediately.description }}</p>\n\n  <op-checkbox-field [label]=\"text.mentioned.title\">\n      <input\n        disabled\n        checked\n        type=\"checkbox\"\n        slot=\"input\"\n      />\n      <p slot=\"description\">{{ text.mentioned.description }}</p>\n  </op-checkbox-field>\n\n  <op-checkbox-field\n    [label]=\"text.involved.title\"\n    [control]=\"form.get('involved')\"\n  >\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"involved\"\n      data-qa-global-notification-type=\"involved\"\n    />\n    <p slot=\"description\">{{ text.involved.description }}</p>\n  </op-checkbox-field>\n\n  <h5>{{ text.alsoNotifyFor.title }}</h5>\n  <p>{{ text.alsoNotifyFor.description }}</p>\n\n  <op-checkbox-field>\n      <input\n        disabled\n        checked\n        type=\"checkbox\"\n        slot=\"input\"\n      />\n      <p slot=\"description\">{{ text.watched }}</p>\n  </op-checkbox-field>\n\n  <op-checkbox-field [control]=\"form.get('workPackageCreated')\">\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"workPackageCreated\"\n      data-qa-global-notification-type=\"work_package_created\"\n    />\n    <p slot=\"description\">{{ text.work_package_created }}</p>\n  </op-checkbox-field>\n\n  <op-checkbox-field [control]=\"form.get('workPackageProcessed')\">\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"workPackageProcessed\"\n      data-qa-global-notification-type=\"work_package_processed\"\n    />\n    <p slot=\"description\">{{ text.work_package_processed }}</p>\n  </op-checkbox-field>\n\n  <op-checkbox-field [control]=\"form.get('workPackageScheduled')\">\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"workPackageScheduled\"\n      data-qa-global-notification-type=\"work_package_scheduled\"\n    />\n    <p slot=\"description\">{{ text.work_package_scheduled }}</p>\n  </op-checkbox-field>\n\n  <op-checkbox-field [control]=\"form.get('workPackagePrioritized')\">\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"workPackagePrioritized\"\n      data-qa-global-notification-type=\"work_package_prioritized\"\n    />\n    <p slot=\"description\">{{ text.work_package_prioritized }}</p>\n  </op-checkbox-field>\n\n  <op-checkbox-field [control]=\"form.get('workPackageCommented')\">\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"workPackageCommented\"\n      data-qa-global-notification-type=\"work_package_commented\"\n    />\n    <p slot=\"description\">{{ text.work_package_commented }}</p>\n  </op-checkbox-field>\n\n  <hr />\n\n  <h5>{{text.projectSpecific.title}}</h5>\n  <p>{{text.projectSpecific.description}}</p>\n\n  <op-notification-settings-table\n    *ngIf=\"userId\"\n    [userId]=\"userId\"\n    [settings]=\"form.controls.projectSettings\"\n    formArrayName=\"projectSettings\"\n    class=\"op-notification-settings-page--table\"\n  ></op-notification-settings-table>\n\n  <div class=\"generic-table--action-buttons\">\n    <button\n      class=\"button -highlight\"\n      [textContent]=\"text.save\"\n      type=\"submit\"\n    ></button>\n  </div>\n</form>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport {\n  FormGroup,\n  FormArray,\n  FormControl,\n} from '@angular/forms';\nimport { take } from 'rxjs/internal/operators/take';\nimport { UIRouterGlobals } from '@uirouter/core';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { CurrentUserService } from 'core-app/core/current-user/current-user.service';\nimport { UntilDestroyedMixin } from 'core-app/shared/helpers/angular/until-destroyed.mixin';\nimport { UserPreferencesService } from 'core-app/features/user-preferences/state/user-preferences.service';\nimport { INotificationSetting } from 'core-app/features/user-preferences/state/notification-setting.model';\n\nexport const myNotificationsPageComponentSelector = 'op-notifications-page';\n\ninterface IToastSettingsValue {\n  involved:boolean;\n  workPackageCreated:boolean;\n  workPackageProcessed:boolean;\n  workPackageScheduled:boolean;\n  workPackagePrioritized:boolean;\n  workPackageCommented:boolean;\n}\n\ninterface IProjectNotificationSettingsValue extends IToastSettingsValue {\n  project:{\n    title:string;\n    href:string;\n  };\n}\n\ninterface IFullNotificationSettingsValue extends IToastSettingsValue {\n  projectSettings:IProjectNotificationSettingsValue[];\n}\n\n@Component({\n  selector: myNotificationsPageComponentSelector,\n  templateUrl: './notifications-settings-page.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationsSettingsPageComponent extends UntilDestroyedMixin implements OnInit {\n  @Input() userId:string;\n\n  public form = new FormGroup({\n    involved: new FormControl(false),\n    workPackageCreated: new FormControl(false),\n    workPackageProcessed: new FormControl(false),\n    workPackageScheduled: new FormControl(false),\n    workPackagePrioritized: new FormControl(false),\n    workPackageCommented: new FormControl(false),\n    projectSettings: new FormArray([]),\n  });\n\n  text = {\n    notifyImmediately: {\n      title: this.I18n.t('js.notifications.settings.global.immediately.title'),\n      description: this.I18n.t('js.notifications.settings.global.immediately.description'),\n    },\n    alsoNotifyFor: {\n      title: this.I18n.t('js.notifications.settings.global.delayed.title'),\n      description: this.I18n.t('js.notifications.settings.global.delayed.description'),\n    },\n    mentioned: {\n      title: this.I18n.t('js.notifications.settings.reasons.mentioned.title'),\n      description: this.I18n.t('js.notifications.settings.reasons.mentioned.description'),\n    },\n    involved: {\n      title: this.I18n.t('js.notifications.settings.reasons.involved.title'),\n      description: this.I18n.t('js.notifications.settings.reasons.involved.description'),\n    },\n    watched: this.I18n.t('js.notifications.settings.reasons.watched'),\n    work_package_commented: this.I18n.t('js.notifications.settings.reasons.work_package_commented'),\n    work_package_created: this.I18n.t('js.notifications.settings.reasons.work_package_created'),\n    work_package_processed: this.I18n.t('js.notifications.settings.reasons.work_package_processed'),\n    work_package_prioritized: this.I18n.t('js.notifications.settings.reasons.work_package_prioritized'),\n    work_package_scheduled: this.I18n.t('js.notifications.settings.reasons.work_package_scheduled'),\n    save: this.I18n.t('js.button_save'),\n    projectSpecific: {\n      title: this.I18n.t('js.notifications.settings.project_specific.title'),\n      description: this.I18n.t('js.notifications.settings.project_specific.description'),\n    },\n  };\n\n  constructor(\n    private changeDetectorRef:ChangeDetectorRef,\n    private I18n:I18nService,\n    private storeService:UserPreferencesService,\n    private currentUserService:CurrentUserService,\n    private uiRouterGlobals:UIRouterGlobals,\n  ) {\n    super();\n  }\n\n  ngOnInit():void {\n    this.userId = this.userId || this.uiRouterGlobals.params.userId;\n    this\n      .currentUserService\n      .user$\n      .pipe(take(1))\n      .subscribe((user) => {\n        this.userId = this.userId || user.id!;\n        this.storeService.get(this.userId);\n      });\n\n    this.storeService.query.notificationsForGlobal$\n      .pipe(this.untilDestroyed())\n      .subscribe((settings) => {\n        if (!settings) {\n          return;\n        }\n\n        this.form.get('involved')?.setValue(settings.involved);\n        this.form.get('workPackageCreated')?.setValue(settings.workPackageCreated);\n        this.form.get('workPackageProcessed')?.setValue(settings.workPackageProcessed);\n        this.form.get('workPackageScheduled')?.setValue(settings.workPackageScheduled);\n        this.form.get('workPackagePrioritized')?.setValue(settings.workPackagePrioritized);\n        this.form.get('workPackageCommented')?.setValue(settings.workPackageCommented);\n      });\n\n    this.storeService.query.projectNotifications$\n      .pipe(this.untilDestroyed())\n      .subscribe((settings) => {\n        if (!settings) {\n          return;\n        }\n\n        const projectSettings = new FormArray([]);\n        projectSettings.clear();\n        settings\n          .sort(\n            (a, b):number => a._links.project.title!.localeCompare(b._links.project.title!),\n          )\n          .forEach((setting) => projectSettings.push(new FormGroup({\n            project: new FormControl(setting._links.project),\n            involved: new FormControl(setting.involved),\n            workPackageCreated: new FormControl(setting.workPackageCreated),\n            workPackageProcessed: new FormControl(setting.workPackageProcessed),\n            workPackageScheduled: new FormControl(setting.workPackageScheduled),\n            workPackagePrioritized: new FormControl(setting.workPackagePrioritized),\n            workPackageCommented: new FormControl(setting.workPackageCommented),\n          })));\n\n        this.form.setControl('projectSettings', projectSettings);\n        this.changeDetectorRef.detectChanges();\n      });\n  }\n\n  public saveChanges():void {\n    const prefs = this.storeService.store.getValue();\n    const notificationSettings = (this.form.value as IFullNotificationSettingsValue);\n    const globalNotification = prefs.notifications.find((notification) => !notification._links.project.href) as INotificationSetting;\n    const globalPrefs:INotificationSetting = {\n      ...globalNotification,\n      _links: { project: { href: null } },\n      watched: true,\n      mentioned: true,\n      involved: notificationSettings.involved,\n      workPackageCreated: notificationSettings.workPackageCreated,\n      workPackageProcessed: notificationSettings.workPackageProcessed,\n      workPackageScheduled: notificationSettings.workPackageScheduled,\n      workPackagePrioritized: notificationSettings.workPackagePrioritized,\n      workPackageCommented: notificationSettings.workPackageCommented,\n    };\n\n    const projectPrefs:INotificationSetting[] = notificationSettings.projectSettings.map((settings) => ({\n      _links: { project: { href: settings.project.href } },\n      watched: true,\n      mentioned: true,\n      involved: settings.involved,\n      workPackageCreated: settings.workPackageCreated,\n      workPackageProcessed: settings.workPackageProcessed,\n      workPackageScheduled: settings.workPackageScheduled,\n      workPackagePrioritized: settings.workPackagePrioritized,\n      workPackageCommented: settings.workPackageCommented,\n      newsAdded: false,\n      newsCommented: false,\n      documentAdded: false,\n      forumMessages: false,\n      wikiPageAdded: false,\n      wikiPageUpdated: false,\n      membershipAdded: false,\n      membershipUpdated: false,\n    }));\n\n    this.storeService.update(this.userId, {\n      ...prefs,\n      notifications: [\n        globalPrefs,\n        ...projectPrefs,\n      ],\n    });\n  }\n}\n","<ng-container [formGroup]=\"form\">\n  <div class=\"op-form--section-header\">\n    <h5 [textContent]=\"text.title\"></h5>\n    <p [textContent]=\"text.explanation\"></p>\n  </div>\n\n  <op-checkbox-field\n    [control]=\"form.get(setting)\"\n    *ngFor=\"let setting of alerts\"\n  >\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      [formControlName]=\"setting\"\n    />\n    <p slot=\"description\">{{ text[setting] }}</p>\n  </op-checkbox-field>\n</ng-container>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n} from '@angular/core';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { UserPreferencesService } from 'core-app/features/user-preferences/state/user-preferences.service';\nimport {\n  FormGroup,\n  FormGroupDirective,\n} from '@angular/forms';\n\nexport type EmailAlertType =\n  'newsAdded'|'newsCommented'|'documentAdded'|'forumMessages'|'wikiPageAdded'|\n  'wikiPageUpdated'|'membershipAdded'|'membershipUpdated';\n\nexport const emailAlerts:EmailAlertType[] = [\n  'newsAdded',\n  'newsCommented',\n  'documentAdded',\n  'forumMessages',\n  'wikiPageAdded',\n  'wikiPageUpdated',\n  'membershipAdded',\n  'membershipUpdated',\n];\n\n@Component({\n  selector: 'op-email-alerts-settings',\n  templateUrl: './email-alerts-settings.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class EmailAlertsSettingsComponent implements OnInit {\n  form:FormGroup;\n\n  alerts:EmailAlertType[] = emailAlerts;\n\n  text = {\n    title: this.I18n.t('js.reminders.settings.alerts.title'),\n    explanation: this.I18n.t('js.reminders.settings.alerts.explanation'),\n    newsAdded: this.I18n.t('js.reminders.settings.alerts.news_added'),\n    newsCommented: this.I18n.t('js.reminders.settings.alerts.news_commented'),\n    documentAdded: this.I18n.t('js.reminders.settings.alerts.document_added'),\n    forumMessages: this.I18n.t('js.reminders.settings.alerts.forum_messages'),\n    wikiPageAdded: this.I18n.t('js.reminders.settings.alerts.wiki_page_added'),\n    wikiPageUpdated: this.I18n.t('js.reminders.settings.alerts.wiki_page_updated'),\n    membershipAdded: this.I18n.t('js.reminders.settings.alerts.membership_added'),\n    membershipUpdated: this.I18n.t('js.reminders.settings.alerts.membership_updated'),\n  };\n\n  constructor(\n    private I18n:I18nService,\n    private storeService:UserPreferencesService,\n    private rootFormGroup:FormGroupDirective,\n  ) {\n  }\n\n  ngOnInit():void {\n    this.form = this.rootFormGroup.control.get('emailAlerts') as FormGroup;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n} from '@angular/core';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { UserPreferencesService } from 'core-app/features/user-preferences/state/user-preferences.service';\nimport {\n  FormGroup,\n  FormGroupDirective,\n} from '@angular/forms';\n\n@Component({\n  selector: 'op-immediate-reminder-settings',\n  templateUrl: './immediate-reminder-settings.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ImmediateReminderSettingsComponent implements OnInit {\n  form:FormGroup;\n\n  text = {\n    title: this.I18n.t('js.reminders.settings.immediate.title'),\n    explanation: this.I18n.t('js.reminders.settings.immediate.explanation'),\n    mentioned: this.I18n.t('js.reminders.settings.immediate.mentioned'),\n  };\n\n  constructor(\n    private I18n:I18nService,\n    private storeService:UserPreferencesService,\n    private rootFormGroup:FormGroupDirective,\n  ) {\n  }\n\n  ngOnInit():void {\n    this.form = this.rootFormGroup.control.get('immediateReminders') as FormGroup;\n  }\n}\n","<ng-container [formGroup]=\"form\">\n  <div class=\"op-form--section-header\">\n    <h5 [textContent]=\"text.title\"></h5>\n  </div>\n\n  <op-checkbox-field\n    [control]=\"form.get('mentioned')\"\n  >\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"mentioned\"\n      data-qa-immediate-reminder=\"mentioned\"\n    />\n    <p slot=\"description\">{{ text.mentioned }}</p>\n  </op-checkbox-field>\n</ng-container>\n","<ng-container\n  *ngIf=\"(selectedTimes$ | async) as selectedTimes\"\n  [formGroup]=\"form\"\n>\n  <div class=\"op-form--section-header\">\n      <h5 [textContent]=\"text.title\"></h5>\n      <p [textContent]=\"text.explanation\"></p>\n  </div>\n\n  <op-checkbox-field [control]=\"form.get('enabled')\">\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"enabled\"\n    />\n    <p slot=\"description\">{{ text.enable }}</p>\n  </op-checkbox-field>\n\n  <div\n    *ngFor=\"let time of selectedTimes; index as i; trackBy: index\"\n    class=\"op-reminder-settings-daily-time--row\"\n  >\n    <input\n      *ngIf=\"(activeTimes$ | async) as activeTimes\"\n      type=\"checkbox\"\n      [ngModel]=\"isActive(time)\"\n      (ngModelChange)=\"toggleActive($event, i, selectedTimes)\"\n      [ngModelOptions]=\"{standalone: true}\"\n      [disabled]=\"isDisabled(time, activeTimes)\"\n      class=\"op-reminder-settings-daily-time--active\"\n      attr.data-qa-selector=\"op-settings-daily-time--active-{{i + 1}}\">\n    <label\n      class=\"op-reminder-settings-daily-time--label\"\n      [textContent]=\"text.timeLabel(i + 1)\"\n      attr.for=\"op-reminder-settings-daily-time-{{i + 1}}--time\">\n    </label>\n    <select\n      [ngModel]=\"time\"\n      (ngModelChange)=\"changeTime($event, selectedTimes, i)\"\n      [ngModelOptions]=\"{standalone: true}\"\n      [disabled]=\"(enabled$ | async) === false\"\n      class=\"op-reminder-settings-daily-time--time form--select -narrow\"\n      attr.id=\"op-reminder-settings-daily-time-{{i + 1}}--time\"\n      required=\"true\">\n      <option\n        *ngFor=\"let availableTime of availableTimes\"\n        [value]=\"availableTime\"\n        [disabled]=\"time !== availableTime && selectedTimes.includes(availableTime)\">\n        {{timeLabel(availableTime)}}\n      </option>\n    </select>\n    <button\n      class=\"spot-link op-reminder-settings-daily-time--remove\"\n      type=\"button\"\n      *ngIf=\"timeRemovable$ | async\"\n      (click)=\"removeTime(selectedTimes, i)\"\n      attr.data-qa-selector=\"op-settings-daily-time--remove-{{i + 1}}\">\n      <op-icon icon-classes=\"icon-small icon-remove icon4\"></op-icon>\n    </button>\n  </div>\n\n  <button\n    class=\"button op-reminder-settings-daily-time--add\"\n    type=\"button\"\n    [disabled]=\"nonAddable$ | async\"\n    (click)=\"addTime(selectedTimes)\">\n    <i class=\"button--icon icon-add\"></i>\n    <span class=\"button--text\">{{text.addTime}}</span>\n  </button>\n</ng-container>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n} from '@angular/core';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport {\n  map,\n  shareReplay,\n  startWith,\n} from 'rxjs/operators';\nimport {\n  combineLatest,\n  NEVER,\n  Observable,\n} from 'rxjs';\nimport { UserPreferencesService } from 'core-app/features/user-preferences/state/user-preferences.service';\nimport {\n  FormArray,\n  FormControl,\n  FormGroup,\n  FormGroupDirective,\n} from '@angular/forms';\nimport { ConfigurationService } from 'core-app/core/config/configuration.service';\n\n@Component({\n  selector: 'op-reminder-settings-daily-time',\n  templateUrl: './reminder-settings-daily-time.component.html',\n  styleUrls: ['./reminder-settings-daily-time.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReminderSettingsDailyTimeComponent implements OnInit {\n  // All times that are available in a day with a 1 hour gap between each.\n  // ['00:00', '01:00', ..., '24:00']\n  public availableTimes:string[] = ReminderSettingsDailyTimeComponent.setupAvailableTimes();\n\n  // The times (hours) that the user deactivated. Those are only stored within the component\n  // as the inactive hours are not persisted. This list is then interleaved with the list\n  // of times stored in the backend. As the order of the times should be kept,\n  // the position needs to be maintained.\n  // Upon a reload of the page, it is accepted to loose this information.\n  public inactiveTimes:Array<{ position:number, time:string }> = [];\n\n  public form:FormGroup;\n\n  // Hours suggested if a new time is added by a user.\n  public suggestedTimes = ['08:00', '12:00', '15:00', '18:00'];\n\n  // Whether the reminder are active at all.\n  public enabled$:Observable<boolean>;\n\n  // The active times as present in the store interleaved with the inactive\n  // times.\n  public selectedTimes$:Observable<string[]> = NEVER;\n\n  // Times that are truly active:\n  // * the reminders are not disabled completely\n  // * the times are not inactive individually.\n  public activeTimes$:Observable<string[]> = NEVER;\n\n  // Times can only be removed if the element is active and if there is more than one time present.\n  public timeRemovable$:Observable<boolean> = NEVER;\n\n  // Times can not be added if the element is disabled or if all the possible times have already been added (active or not).\n  public nonAddable$:Observable<boolean> = NEVER;\n\n  text = {\n    title: this.I18n.t('js.reminders.settings.daily.title'),\n    explanation: this.I18n.t('js.reminders.settings.daily.explanation',\n      { no_time_zone: this.configurationService.isTimezoneSet() ? '' : this.I18n.t('js.reminders.settings.daily.no_time_zone') }),\n    timeLabel: (counter:number):string => this.I18n.t('js.reminders.settings.daily.time_label', { counter }),\n    addTime: this.I18n.t('js.reminders.settings.daily.add_time'),\n    enable: this.I18n.t('js.reminders.settings.daily.enable'),\n  };\n\n  constructor(\n    private I18n:I18nService,\n    private storeService:UserPreferencesService,\n    private rootFormGroup:FormGroupDirective,\n    private configurationService:ConfigurationService,\n  ) {\n  }\n\n  ngOnInit():void {\n    this.form = this.rootFormGroup.control.get('dailyReminders') as FormGroup;\n\n    this.enabled$ = this\n      .form\n      .valueChanges\n      .pipe(\n        startWith(() => this.form.get('enabled')?.value as boolean),\n        map(() => this.form.get('enabled')?.value as boolean),\n        shareReplay(1),\n      );\n\n    this.selectedTimes$ = (this\n      .form\n      .get('times') as FormArray)\n      .valueChanges\n      .pipe(\n        startWith(() => this.form.get('times')?.value as FormArray),\n        map(() => {\n          const timesArray = this.form.get('times') as FormArray;\n          const activeTimes = timesArray.controls.map((c) => c.value as string);\n\n          this\n            .inactiveTimes\n            .sort((a, b) => a.position - b.position)\n            .forEach((inactiveTime) => {\n              activeTimes.splice(inactiveTime.position, 0, inactiveTime.time);\n            });\n\n          return activeTimes;\n        }),\n        shareReplay(1),\n      );\n\n    this.timeRemovable$ = combineLatest([\n      this.enabled$,\n      this.selectedTimes$,\n    ]).pipe(map(([enabled, selectedTimes]) => enabled && selectedTimes.length > 1));\n\n    this.nonAddable$ = combineLatest([\n      this.enabled$,\n      this.selectedTimes$,\n    ]).pipe(map(([enabled, selectedTimes]) => !enabled || selectedTimes.length === this.availableTimes.length));\n\n    this.activeTimes$ = combineLatest([\n      this.enabled$,\n      this.selectedTimes$,\n    ]).pipe(\n      map(([enabled, times]) => (enabled ? times : [])),\n    );\n  }\n\n  addTime(selectedTimes:string[]):void {\n    const time = this.firstAvailableSuggested(selectedTimes) || this.firstAfterSelected(selectedTimes);\n\n    if (time) {\n      this.storeTimes(selectedTimes.concat(time));\n    }\n  }\n\n  changeTime(newTime:string, selectedTimes:string[], index:number):void {\n    selectedTimes.splice(index, 1, newTime);\n\n    this.storeTimes(selectedTimes);\n  }\n\n  isActive(time:string):boolean {\n    return !this.inactiveTimes.find((inactive) => inactive.time === time);\n  }\n\n  removeTime(selectedTimes:string[], index:number):void {\n    this.inactiveTimes = this\n      .inactiveTimes\n      .filter((inactiveTime) => inactiveTime.time !== selectedTimes[index]);\n\n    this.inactiveTimes\n      .forEach((inactiveTime) => {\n        if (inactiveTime.position > index) {\n          // eslint-disable-next-line no-param-reassign\n          inactiveTime.position -= 1;\n        }\n      });\n\n    selectedTimes.splice(index, 1);\n\n    if (selectedTimes.length === 1) {\n      this.inactiveTimes = [];\n    }\n\n    // Activate the first time if none is active.\n    if (selectedTimes.length === this.inactiveTimes.length) {\n      this.inactiveTimes.shift();\n    }\n\n    this.storeTimes(selectedTimes);\n  }\n\n  toggleActive(active:boolean, index:number, selectedTimes:string[]):void {\n    if (!active) {\n      this.inactiveTimes.push({ position: index, time: selectedTimes[index] });\n    } else {\n      this.inactiveTimes = this.inactiveTimes.filter((inactiveTime) => inactiveTime.time !== selectedTimes[index]);\n    }\n\n    this.storeTimes(selectedTimes);\n  }\n\n  timeLabel(time:string):string {\n    return this\n      .I18n\n      .toTime(\n        'time.formats.time',\n        ReminderSettingsDailyTimeComponent.dateForHour(parseInt(time.split(':')[0], 10)),\n      );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isDisabled(time:string, activeTimes:string[]):boolean {\n    return activeTimes.length === 0 || (activeTimes.length === 1 && activeTimes[0] === time);\n  }\n\n  private storeTimes(selectedTimes:string[]) {\n    const times = selectedTimes\n      .filter(\n        (selected) => !this.inactiveTimes\n          .map((inactive) => inactive.time)\n          .includes(selected),\n      );\n\n    const timesForm = this.form.get('times') as FormArray;\n    timesForm.clear({ emitEvent: false });\n    times.forEach((time) => {\n      timesForm.push(new FormControl(time), { emitEvent: false });\n    });\n\n    timesForm.enable({ emitEvent: true });\n  }\n\n  private firstAvailableSuggested(selectedTimes:string[]) {\n    return this.availableTimes.find((v) => this.suggestedTimes.includes(v) && !selectedTimes.includes(v));\n  }\n\n  private firstAfterSelected(selectedTimes:string[]) {\n    const indexLastSelected = this.availableTimes.indexOf(selectedTimes[selectedTimes.length - 1]);\n\n    for (let i = indexLastSelected; i < 24 + indexLastSelected; i++) {\n      if (!selectedTimes.includes(this.availableTimes[i % 24])) {\n        return this.availableTimes[i % 24];\n      }\n    }\n\n    return null;\n  }\n\n  private static setupAvailableTimes() {\n    return Array.from({ length: 24 }, (v, i) => ReminderSettingsDailyTimeComponent\n      .dateForHour(i)\n      .toLocaleTimeString('en-US', { hour12: false, hour: 'numeric', minute: 'numeric' }));\n  }\n\n  private static dateForHour(hour:number) {\n    const date = new Date();\n    date.setTime(1000 * 60 * 60 * (hour - 1));\n\n    return date;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n} from '@angular/core';\nimport {\n  FormGroup,\n  FormGroupDirective,\n} from '@angular/forms';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport {\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'op-pause-reminders',\n  templateUrl: './pause-reminders.component.html',\n  styleUrls: ['./pause-reminders.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PauseRemindersComponent implements OnInit {\n  form:FormGroup;\n\n  selectedDates$:Observable<[string, string]>;\n\n  enabled$:Observable<boolean>;\n\n  text = {\n    label: this.I18n.t('js.reminders.settings.pause.label'),\n    date_placeholder: this.I18n.t('js.placeholders.date'),\n    first_day: this.I18n.t('js.reminders.settings.pause.first_day'),\n    last_day: this.I18n.t('js.reminders.settings.pause.first_day'),\n  };\n\n  constructor(\n    private I18n:I18nService,\n    private rootFormGroup:FormGroupDirective,\n  ) {\n  }\n\n  ngOnInit():void {\n    this.form = this.rootFormGroup.control.get('pauseReminders') as FormGroup;\n    this.selectedDates$ = this\n      .form\n      .valueChanges\n      .pipe(\n        startWith(this.form.value),\n        map((form:{ firstDay:string, lastDay:string }) => [form.firstDay, form.lastDay]),\n      );\n\n    this.enabled$ = this\n      .form\n      .valueChanges\n      .pipe(\n        startWith(this.form.value),\n        map((form:{ enabled:boolean }) => form.enabled),\n      );\n  }\n\n  setDates($event:[string, string]):void {\n    const [firstDay, lastDay] = $event;\n    this.form.patchValue({\n      firstDay,\n      lastDay,\n    });\n  }\n}\n","<ng-container [formGroup]=\"formGroup.control\">\n  <div class=\"op-form--section-header\">\n    <h5 [textContent]=\"text.title\"></h5>\n  </div>\n\n  <op-checkbox-field\n    *ngFor=\"let workday of localeWorkdays; let i = index\"\n    formArrayName=\"workdays\"\n    [control]=\"controlForLocalWorkday(workday)\"\n  >\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      [formControlName]=\"indexOfLocalWorkday(workday)\"\n    />\n    <p slot=\"description\"\n       [textContent]=\"workday\">\n    </p>\n  </op-checkbox-field>\n\n  <op-pause-reminders></op-pause-reminders>\n</ng-container>\n","<div\n  class=\"op-pause-reminders\"\n  [formGroup]=\"form\"\n>\n  <op-checkbox-field\n    class=\"op-pause-reminders--checkbox\"\n    [control]=\"form.get('enabled')\"\n  >\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"enabled\"\n    />\n    <p slot=\"description\">{{ text.label }}</p>\n  </op-checkbox-field>\n\n  <op-range-date-picker\n    [size]=\"23\"\n    [required]=\"enabled$ | async\"\n    [disabled]=\"!(enabled$ | async)\"\n    (changed)=\"setDates($event)\"\n    [initialDates]=\"selectedDates$ | async\"\n  >\n  </op-range-date-picker>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n} from '@angular/core';\nimport {\n  FormArray,\n  FormControl,\n  FormGroupDirective,\n} from '@angular/forms';\nimport * as moment from 'moment';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\n\n@Component({\n  selector: 'op-workdays-settings',\n  templateUrl: './workdays-settings.component.html',\n  styleUrls: ['./workdays-settings.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WorkdaysSettingsComponent implements OnInit {\n  control:FormArray;\n\n  /**\n   * The locale might render workdays in a different order, which is what moment return with localeSorted\n   * and used for rendering the component.\n   */\n  localeWorkdays:string[] = moment.weekdays(true);\n\n  /**\n   * Almost* ISO workdays with localized strings.\n   * ISO workdays are 1=Monday, ... 7=Sunday which is what we persist\n   *\n   * Working with the FormArray however, we use 0=Monday, 6=Sunday and add one before saving\n   * @private\n   */\n  private isoWorkdays:string[] = WorkdaysSettingsComponent.buildISOWeekdays();\n\n  text = {\n    title: this.I18n.t('js.reminders.settings.workdays.title'),\n  };\n\n  constructor(\n    private I18n:I18nService,\n    readonly formGroup:FormGroupDirective,\n  ) {\n  }\n\n  ngOnInit():void {\n    this.control = this.formGroup.control.get('workdays') as FormArray;\n  }\n\n  indexOfLocalWorkday(day:string):number {\n    return this.isoWorkdays.indexOf(day);\n  }\n\n  controlForLocalWorkday(day:string):FormControl {\n    const index = this.indexOfLocalWorkday(day);\n    return this.control.at(index) as FormControl;\n  }\n\n  /** Workdays from moment.js are in non-ISO order, that means Sunday=0, Saturday=6 */\n  static buildISOWeekdays():string[] {\n    const days = moment.weekdays(false);\n\n    days.push(days.shift() as string);\n\n    return days;\n  }\n}\n","<div class=\"title-container\">\n  <h2 [textContent]=\"text.title\"></h2>\n</div>\n\n<form\n  *ngIf=\"formInitialized\"\n  [formGroup]=\"form\"\n  (ngSubmit)=\"saveChanges()\"\n  class=\"op-form\"\n>\n  <op-immediate-reminder-settings class=\"op-form--fieldset\"></op-immediate-reminder-settings>\n  <op-reminder-settings-daily-time class=\"op-form--fieldset\"></op-reminder-settings-daily-time>\n  <op-workdays-settings class=\"op-form--fieldset\"></op-workdays-settings>\n  <op-email-alerts-settings class=\"op-form--fieldset\"></op-email-alerts-settings>\n\n  <div class=\"op-form--submit\">\n    <button\n      class=\"button -highlight\"\n      [textContent]=\"text.save\"\n      type=\"submit\"\n    ></button>\n  </div>\n</form>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { CurrentUserService } from 'core-app/core/current-user/current-user.service';\nimport { take } from 'rxjs/internal/operators/take';\nimport { UIRouterGlobals } from '@uirouter/core';\nimport { UserPreferencesService } from 'core-app/features/user-preferences/state/user-preferences.service';\nimport {\n  FormArray,\n  FormBuilder,\n} from '@angular/forms';\nimport {\n  DailyRemindersSettings,\n  ImmediateRemindersSettings,\n  PauseRemindersSettings,\n  IUserPreference,\n} from 'core-app/features/user-preferences/state/user-preferences.model';\nimport {\n  emailAlerts,\n  EmailAlertType,\n} from 'core-app/features/user-preferences/reminder-settings/email-alerts/email-alerts-settings.component';\nimport { UntilDestroyedMixin } from 'core-app/shared/helpers/angular/until-destroyed.mixin';\nimport {\n  filter,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { filterObservable } from 'core-app/shared/helpers/rxjs/filterWith';\nimport { INotificationSetting } from 'core-app/features/user-preferences/state/notification-setting.model';\n\nexport const myReminderPageComponentSelector = 'op-reminders-page';\n\ninterface IReminderSettingsFormValue {\n  immediateReminders:ImmediateRemindersSettings,\n  dailyReminders:DailyRemindersSettings,\n  pauseReminders:Partial<PauseRemindersSettings>,\n  emailAlerts:Record<EmailAlertType, boolean>;\n  workdays:boolean[];\n}\n\n@Component({\n  selector: myReminderPageComponentSelector,\n  templateUrl: './reminder-settings-page.component.html',\n  styleUrls: ['./reminder-settings-page.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReminderSettingsPageComponent extends UntilDestroyedMixin implements OnInit {\n  @Input() userId:string;\n\n  public form = this.fb.group({\n    immediateReminders: this.fb.group({\n      mentioned: this.fb.control(false),\n    }),\n    dailyReminders: this.fb.group({\n      enabled: this.fb.control(false),\n      times: this.fb.array([]),\n    }),\n    pauseReminders: this.fb.group({\n      enabled: this.fb.control(false),\n      firstDay: this.fb.control(''),\n      lastDay: this.fb.control(''),\n    }),\n    workdays: this.fb.array([\n      this.fb.control(false),\n      this.fb.control(true),\n      this.fb.control(true),\n      this.fb.control(true),\n      this.fb.control(true),\n      this.fb.control(true),\n      this.fb.control(false),\n    ]),\n    emailAlerts: this.fb.group({\n      newsAdded: this.fb.control(false),\n      newsCommented: this.fb.control(false),\n      documentAdded: this.fb.control(false),\n      forumMessages: this.fb.control(false),\n      wikiPageAdded: this.fb.control(false),\n      wikiPageUpdated: this.fb.control(false),\n      membershipAdded: this.fb.control(false),\n      membershipUpdated: this.fb.control(false),\n    }),\n  });\n\n  text = {\n    title: this.I18n.t('js.reminders.settings.title'),\n    save: this.I18n.t('js.button_save'),\n  };\n\n  formInitialized = false;\n\n  constructor(\n    private I18n:I18nService,\n    private storeService:UserPreferencesService,\n    private currentUserService:CurrentUserService,\n    private uiRouterGlobals:UIRouterGlobals,\n    private fb:FormBuilder,\n    private cdRef:ChangeDetectorRef,\n  ) {\n    super();\n  }\n\n  ngOnInit():void {\n    this.userId = (this.userId || this.uiRouterGlobals.params.userId) as string;\n    this\n      .currentUserService\n      .user$\n      .pipe(take(1))\n      .subscribe((user) => {\n        this.userId = this.userId || user?.id as string;\n        this.storeService.get(this.userId);\n      });\n\n    this.storeService.query.select()\n      .pipe(\n        filter((settings) => !!settings),\n        withLatestFrom(this.storeService.query.globalNotification$),\n        filterObservable(this.storeService.query.selectLoading(), (val) => !val),\n      )\n      .subscribe(([settings, globalSetting]) => {\n        this.buildForm(settings, globalSetting);\n      });\n  }\n\n  private buildForm(settings:IUserPreference, globalSetting:INotificationSetting) {\n    this.form.get('immediateReminders.mentioned')?.setValue(settings.immediateReminders.mentioned);\n\n    this.form.get('dailyReminders.enabled')?.setValue(settings.dailyReminders.enabled);\n\n    this.form.get('pauseReminders')?.patchValue(settings.pauseReminders);\n\n    const dailyReminderTimes = this.form.get('dailyReminders.times') as FormArray;\n    dailyReminderTimes.clear({ emitEvent: false });\n    [...settings.dailyReminders.times].sort().forEach((time) => {\n      dailyReminderTimes.push(this.fb.control(time), { emitEvent: false });\n    });\n\n    dailyReminderTimes.enable({ emitEvent: true });\n\n    const workdays = this.form.get('workdays') as FormArray;\n    for (let i = 0; i <= 6; i++) {\n      const control = workdays.at(i);\n      control.setValue(settings.workdays.includes(i + 1));\n    }\n\n    emailAlerts.forEach((alert) => {\n      this.form.get(`emailAlerts.${alert}`)?.setValue(globalSetting[alert]);\n    });\n\n    this.formInitialized = true;\n    this.cdRef.detectChanges();\n  }\n\n  public saveChanges():void {\n    const prefs = this.storeService.query.getValue();\n    const globalNotifications = prefs.notifications.filter((notification) => !notification._links.project.href);\n    const projectNotifications = prefs.notifications.filter((notification) => !!notification._links.project.href);\n    const reminderSettings = (this.form.value as IReminderSettingsFormValue);\n    const workdays = ReminderSettingsPageComponent.buildWorkdays(reminderSettings.workdays);\n    const pauseReminders = ReminderSettingsPageComponent.buildPauses(reminderSettings.pauseReminders);\n    const { dailyReminders, immediateReminders } = reminderSettings;\n\n    this.storeService.update(this.userId, {\n      ...prefs,\n      workdays,\n      dailyReminders,\n      immediateReminders,\n      pauseReminders,\n      notifications: [\n        ...globalNotifications.map((notification) => (\n          {\n            ...notification,\n            ...reminderSettings.emailAlerts,\n          }\n        )),\n        ...projectNotifications,\n      ],\n    });\n  }\n\n  private static buildWorkdays(formValues:boolean[]):number[] {\n    return formValues\n      .reduce(\n        (result, val, index) => {\n          if (val) {\n            return result.concat([index + 1]);\n          }\n\n          return result;\n        },\n        [] as number[],\n      );\n  }\n\n  private static buildPauses(formValues:Partial<PauseRemindersSettings>):Partial<PauseRemindersSettings> {\n    if (formValues.enabled) {\n      return formValues;\n    }\n\n    return { enabled: false };\n  }\n}\n","import {\n  filter,\n  map,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n/**\n * Filter emissions from the source observable\n * using values from another observable.\n *\n * Applies the given filter function and maps to the original observable.\n *\n * @param other$ Other observable to observe values\n * @param filterFn Filter to apply to values of other$\n */\nexport function filterObservable<T, V>(\n  other$:Observable<V>,\n  filterFn:(val:V) => boolean,\n):(source$:Observable<T>) => Observable<T> {\n  return (source$) => source$\n    .pipe(\n      withLatestFrom(other$),\n      filter(([, val]) => filterFn(val)),\n      map(([source]) => source),\n    );\n}\n","// -- copyright\n// OpenProject is an open source project management software.\n// Copyright (C) 2012-2022 the OpenProject GmbH\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License version 3.\n//\n// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:\n// Copyright (C) 2006-2013 Jean-Philippe Lang\n// Copyright (C) 2010-2013 the ChiliProject Team\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License\n// as published by the Free Software Foundation; either version 2\n// of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n//\n// See COPYRIGHT and LICENSE files for more details.\n//++\n\nimport { Ng2StateDeclaration } from '@uirouter/angular';\nimport { NotificationsSettingsPageComponent } from 'core-app/features/user-preferences/notifications-settings/page/notifications-settings-page.component';\nimport { ReminderSettingsPageComponent } from './reminder-settings/page/reminder-settings-page.component';\n\nexport const MY_ACCOUNT_ROUTES:Ng2StateDeclaration[] = [\n  {\n    name: 'my_notifications',\n    url: '/my/notifications',\n    component: NotificationsSettingsPageComponent,\n  },\n  {\n    name: 'user_notifications',\n    url: '/users/:userId/edit/notifications',\n    component: NotificationsSettingsPageComponent,\n  },\n  {\n    name: 'my_reminders',\n    url: '/my/reminders',\n    component: ReminderSettingsPageComponent,\n  },\n  {\n    name: 'user_reminders',\n    url: '/users/:userId/edit/reminders',\n    component: ReminderSettingsPageComponent,\n  },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UIRouterModule } from '@uirouter/angular';\nimport {\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { OPSharedModule } from 'core-app/shared/shared.module';\nimport { OpenprojectAutocompleterModule } from 'core-app/shared/components/autocompleter/openproject-autocompleter.module';\nimport { UserPreferencesService } from 'core-app/features/user-preferences/state/user-preferences.service';\nimport { NotificationsSettingsPageComponent } from 'core-app/features/user-preferences/notifications-settings/page/notifications-settings-page.component';\nimport { NotificationSettingInlineCreateComponent } from 'core-app/features/user-preferences/notifications-settings/inline-create/notification-setting-inline-create.component';\nimport { MY_ACCOUNT_ROUTES } from 'core-app/features/user-preferences/user-preferences.routes';\nimport { NotificationsSettingsToolbarComponent } from './notifications-settings/toolbar/notifications-settings-toolbar.component';\nimport { NotificationSettingsTableComponent } from './notifications-settings/table/notification-settings-table.component';\nimport { ReminderSettingsPageComponent } from './reminder-settings/page/reminder-settings-page.component';\nimport { ReminderSettingsDailyTimeComponent } from 'core-app/features/user-preferences/reminder-settings/reminder-time/reminder-settings-daily-time.component';\nimport { ImmediateReminderSettingsComponent } from 'core-app/features/user-preferences/reminder-settings/immediate-reminders/immediate-reminder-settings.component';\nimport { EmailAlertsSettingsComponent } from 'core-app/features/user-preferences/reminder-settings/email-alerts/email-alerts-settings.component';\nimport { WorkdaysSettingsComponent } from './reminder-settings/workdays/workdays-settings.component';\nimport { PauseRemindersComponent } from './reminder-settings/pause-reminders/pause-reminders.component';\n\n@NgModule({\n  providers: [\n    UserPreferencesService,\n  ],\n  declarations: [\n    NotificationsSettingsPageComponent,\n    NotificationSettingInlineCreateComponent,\n    NotificationsSettingsToolbarComponent,\n    NotificationSettingsTableComponent,\n    ReminderSettingsPageComponent,\n    ReminderSettingsDailyTimeComponent,\n    ImmediateReminderSettingsComponent,\n    EmailAlertsSettingsComponent,\n    WorkdaysSettingsComponent,\n    PauseRemindersComponent,\n  ],\n  imports: [\n    CommonModule,\n    OPSharedModule,\n    OpenprojectAutocompleterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    // Routes for /my/*\n    UIRouterModule.forChild({\n      states: MY_ACCOUNT_ROUTES,\n    }),\n  ],\n})\nexport class OpenProjectMyAccountModule { }\n"],"sourceRoot":"webpack:///","file":"src_app_features_user-preferences_user-preferences_module_ts.7117028246c6dfbd19a2.js"}