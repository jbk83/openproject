{"version":3,"mappings":"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BAEAA,oBACA,MAKA,gBACA,eACA,8BACA,oBACAlB,iCACA,cACM,UACN,kBACA,KACM,WACN+I,aACAA,UACAA,0BACA,sBACA,oCACM,wBACNA,gBACAA,4BACAA,kBAEA7H,oDACA,QAIA,cACA,oBACA,eACA,gBACA8H,aACA,MAGA,gBAEA,0BACAD,EAGA,gBACA,qBACA,gBACA,eACAC,aACA,MAEAF,SAEA,UAIA,cACA,qBAEA,QADAE,EACA,qBACA,UACA,yBACAF,gBACU,UACV,UACAA,aACA,MAEA,yBACAA,iBAIA,cAIA,kBACAG,oBACAA,mBACAA,uBACAA,oBACAL,kEACAK,kBAEA,cACA/H,sCAEA,gBAEA,QADA4H,IACA,CAKA,IAJA5H,YAGA4H,qBACAF,sCACAA,wCACA,OAEAxH,MAIA,kBACA,oBACA0H,sBACAI,GACM,cACNpI,EAEA6E,EAGA,kBACA,iBACAmD,sBACAK,QACAnI,GACM4H,oCACNO,gBACAnI,WAEAmI,UACAD,GAGA,kBACA,cACA,kBAIA,OAHAJ,iCACAF,sDACAxH,KACA0H,sDACAK,QACAC,IAEAD,cACAE,GAEM,2CACNF,gBACAC,WAEAD,UACAE,GAIA,kBACA,mBACAF,UACAC,IAEAhI,KACAuE,GAEA,kBACA,iBACAyD,SAGA,kBACA,aACA,qBACAnI,EACM,mCACN,6BACA,iCACA,mBACA2H,oCACA7H,QAEAA,OACA+H,oCAEAnD,EAEA,iBACA3E,EAEA,kBACA,qBACA4H,4BACA5H,UAEA,kBACA,oBACA,4BAAiDmI,WAAqBnI,IACtEmI,UACAnI,UAEA,kBACA,oBACAA,SAGA,OAlMAd,cAkMA,CACAmB,uBACA,OAAmBsB,WACnBf,QACA0H,cACAC,2BACA/D,cACA,iCACAuD,GAGAzH,oBAIA,IAHAyH,qBACAA,4BAEA7H,yBACAlB,OACA,sBACA,6BACAmJ,OACAJ,0BACAI,IACAL,4BAEAA,GAGApH,uBACA,gBAEA,4BACA,8BACAR,mBAEAA,aAEA,+BACA,gCACA,uCAEA,aACA,uCACAA,8BAEAA,6CAEA,gDACA,uCACA,WACA,QACA,qBACA8H,SACA,UACYJ,6CAGZ,MAFAI,cAEA,GAGQQ,EACR,SACA,mCACA,+BAGA,MAFAR,SAKA,gCACAA,SACA,oBACA9H,iBAGAuI,8BACAlD,4BACAC,yBAEAkD,sCACA/F,mCAEAgG,0BACAzI,aACAA,YAGA0I,0BACA,kBAA8BrJ,yCAAsD,MAGpFsJ,8BAEA,QADAd,KACAD,YAAmCA,EAAIA,SACvCC,kBACA,uBAKAzI,+BACAA,sCACAA,yCACAA,0BAAsCC,yBArZtCD,CAAQuB,EAAQ","names":["script","style","n","_","s","q","d","o","u","name","htmlMode","multilineTagIndentFactor","multilineTagIndentPastTag","allowMissingTagName","S","i","I","p","y","A","e","z","c","startState","token","copyState","localMode","htmlState","indent","innerMode","state","k","CodeMirror","str","obj","words","split","length","list","end","escapes","phpString","stream","patterns","match","tokenize","matchSequence","slice","closing","phpString_","escaped","eol","tokStack","pop","next","phpKeywords","phpAtoms","phpBuiltin","registerHelper","join","phpConfig","helperType","keywords","blockKeywords","defKeywords","atoms","builtin","multiLineStrings","hooks","$","eatWhile","before","quoted","eat","delim","current","push","_stream","defineMode","config","parserConfig","getMode","phpMode","isPHP","curMode","sol","pending","php","curState","html","context","prev","pos","m","cur","openPHP","search","test","backUp","startOpen","htmlNew","phpNew","dispatch","textAfter","line","blockCommentStart","blockCommentEnd","lineComment","mode","defineMIME","mod","require","autoSelfClosers","area","embed","keygen","track","implicitlyClosed","dd","rp","th","contextGrabbers","dt","li","option","optgroup","address","div","h1","header","rt","tbody","td","tfoot","thead","tr","doNotIndent","pre","allowUnquoted","allowMissing","caseFold","w","f","j","r","l","a","this","T","t","x","E","indented","tagName","h","electricInput","configuration","skipAttribute","xmlCurrentTag","xmlCurrentContext"],"sources":["./node_modules/codemirror/mode/htmlmixed/htmlmixed.js","./node_modules/codemirror/mode/php/php.js","./node_modules/codemirror/mode/xml/xml.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"), require(\"../css/css\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\", \"../css/css\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var defaultTags = {\n    script: [\n      [\"lang\", /(javascript|babel)/i, \"javascript\"],\n      [\"type\", /^(?:text|application)\\/(?:x-)?(?:java|ecma)script$|^module$|^$/i, \"javascript\"],\n      [\"type\", /./, \"text/plain\"],\n      [null, null, \"javascript\"]\n    ],\n    style:  [\n      [\"lang\", /^css$/i, \"css\"],\n      [\"type\", /^(text\\/)?(x-)?(stylesheet|css)$/i, \"css\"],\n      [\"type\", /./, \"text/plain\"],\n      [null, null, \"css\"]\n    ]\n  };\n\n  function maybeBackup(stream, pat, style) {\n    var cur = stream.current(), close = cur.search(pat);\n    if (close > -1) {\n      stream.backUp(cur.length - close);\n    } else if (cur.match(/<\\/?$/)) {\n      stream.backUp(cur.length);\n      if (!stream.match(pat, false)) stream.match(cur);\n    }\n    return style;\n  }\n\n  var attrRegexpCache = {};\n  function getAttrRegexp(attr) {\n    var regexp = attrRegexpCache[attr];\n    if (regexp) return regexp;\n    return attrRegexpCache[attr] = new RegExp(\"\\\\s+\" + attr + \"\\\\s*=\\\\s*('|\\\")?([^'\\\"]+)('|\\\")?\\\\s*\");\n  }\n\n  function getAttrValue(text, attr) {\n    var match = text.match(getAttrRegexp(attr))\n    return match ? /^\\s*(.*?)\\s*$/.exec(match[2])[1] : \"\"\n  }\n\n  function getTagRegexp(tagName, anchored) {\n    return new RegExp((anchored ? \"^\" : \"\") + \"<\\/\\s*\" + tagName + \"\\s*>\", \"i\");\n  }\n\n  function addTags(from, to) {\n    for (var tag in from) {\n      var dest = to[tag] || (to[tag] = []);\n      var source = from[tag];\n      for (var i = source.length - 1; i >= 0; i--)\n        dest.unshift(source[i])\n    }\n  }\n\n  function findMatchingMode(tagInfo, tagText) {\n    for (var i = 0; i < tagInfo.length; i++) {\n      var spec = tagInfo[i];\n      if (!spec[0] || spec[1].test(getAttrValue(tagText, spec[0]))) return spec[2];\n    }\n  }\n\n  CodeMirror.defineMode(\"htmlmixed\", function (config, parserConfig) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      htmlMode: true,\n      multilineTagIndentFactor: parserConfig.multilineTagIndentFactor,\n      multilineTagIndentPastTag: parserConfig.multilineTagIndentPastTag,\n      allowMissingTagName: parserConfig.allowMissingTagName,\n    });\n\n    var tags = {};\n    var configTags = parserConfig && parserConfig.tags, configScript = parserConfig && parserConfig.scriptTypes;\n    addTags(defaultTags, tags);\n    if (configTags) addTags(configTags, tags);\n    if (configScript) for (var i = configScript.length - 1; i >= 0; i--)\n      tags.script.unshift([\"type\", configScript[i].matches, configScript[i].mode])\n\n    function html(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState), tag = /\\btag\\b/.test(style), tagName\n      if (tag && !/[<>\\s\\/]/.test(stream.current()) &&\n          (tagName = state.htmlState.tagName && state.htmlState.tagName.toLowerCase()) &&\n          tags.hasOwnProperty(tagName)) {\n        state.inTag = tagName + \" \"\n      } else if (state.inTag && tag && />$/.test(stream.current())) {\n        var inTag = /^([\\S]+) (.*)/.exec(state.inTag)\n        state.inTag = null\n        var modeSpec = stream.current() == \">\" && findMatchingMode(tags[inTag[1]], inTag[2])\n        var mode = CodeMirror.getMode(config, modeSpec)\n        var endTagA = getTagRegexp(inTag[1], true), endTag = getTagRegexp(inTag[1], false);\n        state.token = function (stream, state) {\n          if (stream.match(endTagA, false)) {\n            state.token = html;\n            state.localState = state.localMode = null;\n            return null;\n          }\n          return maybeBackup(stream, endTag, state.localMode.token(stream, state.localState));\n        };\n        state.localMode = mode;\n        state.localState = CodeMirror.startState(mode, htmlMode.indent(state.htmlState, \"\", \"\"));\n      } else if (state.inTag) {\n        state.inTag += stream.current()\n        if (stream.eol()) state.inTag += \" \"\n      }\n      return style;\n    };\n\n    return {\n      startState: function () {\n        var state = CodeMirror.startState(htmlMode);\n        return {token: html, inTag: null, localMode: null, localState: null, htmlState: state};\n      },\n\n      copyState: function (state) {\n        var local;\n        if (state.localState) {\n          local = CodeMirror.copyState(state.localMode, state.localState);\n        }\n        return {token: state.token, inTag: state.inTag,\n                localMode: state.localMode, localState: local,\n                htmlState: CodeMirror.copyState(htmlMode, state.htmlState)};\n      },\n\n      token: function (stream, state) {\n        return state.token(stream, state);\n      },\n\n      indent: function (state, textAfter, line) {\n        if (!state.localMode || /^\\s*<\\//.test(textAfter))\n          return htmlMode.indent(state.htmlState, textAfter, line);\n        else if (state.localMode.indent)\n          return state.localMode.indent(state.localState, textAfter, line);\n        else\n          return CodeMirror.Pass;\n      },\n\n      innerMode: function (state) {\n        return {state: state.localState || state.htmlState, mode: state.localMode || htmlMode};\n      }\n    };\n  }, \"xml\", \"javascript\", \"css\");\n\n  CodeMirror.defineMIME(\"text/html\", \"htmlmixed\");\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../clike/clike\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../clike/clike\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function keywords(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  // Helper for phpString\n  function matchSequence(list, end, escapes) {\n    if (list.length == 0) return phpString(end);\n    return function (stream, state) {\n      var patterns = list[0];\n      for (var i = 0; i < patterns.length; i++) if (stream.match(patterns[i][0])) {\n        state.tokenize = matchSequence(list.slice(1), end);\n        return patterns[i][1];\n      }\n      state.tokenize = phpString(end, escapes);\n      return \"string\";\n    };\n  }\n  function phpString(closing, escapes) {\n    return function(stream, state) { return phpString_(stream, state, closing, escapes); };\n  }\n  function phpString_(stream, state, closing, escapes) {\n    // \"Complex\" syntax\n    if (escapes !== false && stream.match(\"${\", false) || stream.match(\"{$\", false)) {\n      state.tokenize = null;\n      return \"string\";\n    }\n\n    // Simple syntax\n    if (escapes !== false && stream.match(/^\\$[a-zA-Z_][a-zA-Z0-9_]*/)) {\n      // After the variable name there may appear array or object operator.\n      if (stream.match(\"[\", false)) {\n        // Match array operator\n        state.tokenize = matchSequence([\n          [[\"[\", null]],\n          [[/\\d[\\w\\.]*/, \"number\"],\n           [/\\$[a-zA-Z_][a-zA-Z0-9_]*/, \"variable-2\"],\n           [/[\\w\\$]+/, \"variable\"]],\n          [[\"]\", null]]\n        ], closing, escapes);\n      }\n      if (stream.match(/^->\\w/, false)) {\n        // Match object operator\n        state.tokenize = matchSequence([\n          [[\"->\", null]],\n          [[/[\\w]+/, \"variable\"]]\n        ], closing, escapes);\n      }\n      return \"variable-2\";\n    }\n\n    var escaped = false;\n    // Normal string\n    while (!stream.eol() &&\n           (escaped || escapes === false ||\n            (!stream.match(\"{$\", false) &&\n             !stream.match(/^(\\$[a-zA-Z_][a-zA-Z0-9_]*|\\$\\{)/, false)))) {\n      if (!escaped && stream.match(closing)) {\n        state.tokenize = null;\n        state.tokStack.pop(); state.tokStack.pop();\n        break;\n      }\n      escaped = stream.next() == \"\\\\\" && !escaped;\n    }\n    return \"string\";\n  }\n\n  var phpKeywords = \"abstract and array as break case catch class clone const continue declare default \" +\n    \"do else elseif enddeclare endfor endforeach endif endswitch endwhile extends final \" +\n    \"for foreach function global goto if implements interface instanceof namespace \" +\n    \"new or private protected public static switch throw trait try use var while xor \" +\n    \"die echo empty exit eval include include_once isset list require require_once return \" +\n    \"print unset __halt_compiler self static parent yield insteadof finally\";\n  var phpAtoms = \"true false null TRUE FALSE NULL __CLASS__ __DIR__ __FILE__ __LINE__ __METHOD__ __FUNCTION__ __NAMESPACE__ __TRAIT__\";\n  var phpBuiltin = \"func_num_args func_get_arg func_get_args strlen strcmp strncmp strcasecmp strncasecmp each error_reporting define defined trigger_error user_error set_error_handler restore_error_handler get_declared_classes get_loaded_extensions extension_loaded get_extension_funcs debug_backtrace constant bin2hex hex2bin sleep usleep time mktime gmmktime strftime gmstrftime strtotime date gmdate getdate localtime checkdate flush wordwrap htmlspecialchars htmlentities html_entity_decode md5 md5_file crc32 getimagesize image_type_to_mime_type phpinfo phpversion phpcredits strnatcmp strnatcasecmp substr_count strspn strcspn strtok strtoupper strtolower strpos strrpos strrev hebrev hebrevc nl2br basename dirname pathinfo stripslashes stripcslashes strstr stristr strrchr str_shuffle str_word_count strcoll substr substr_replace quotemeta ucfirst ucwords strtr addslashes addcslashes rtrim str_replace str_repeat count_chars chunk_split trim ltrim strip_tags similar_text explode implode setlocale localeconv parse_str str_pad chop strchr sprintf printf vprintf vsprintf sscanf fscanf parse_url urlencode urldecode rawurlencode rawurldecode readlink linkinfo link unlink exec system escapeshellcmd escapeshellarg passthru shell_exec proc_open proc_close rand srand getrandmax mt_rand mt_srand mt_getrandmax base64_decode base64_encode abs ceil floor round is_finite is_nan is_infinite bindec hexdec octdec decbin decoct dechex base_convert number_format fmod ip2long long2ip getenv putenv getopt microtime gettimeofday getrusage uniqid quoted_printable_decode set_time_limit get_cfg_var magic_quotes_runtime set_magic_quotes_runtime get_magic_quotes_gpc get_magic_quotes_runtime import_request_variables error_log serialize unserialize memory_get_usage memory_get_peak_usage var_dump var_export debug_zval_dump print_r highlight_file show_source highlight_string ini_get ini_get_all ini_set ini_alter ini_restore get_include_path set_include_path restore_include_path setcookie header headers_sent connection_aborted connection_status ignore_user_abort parse_ini_file is_uploaded_file move_uploaded_file intval floatval doubleval strval gettype settype is_null is_resource is_bool is_long is_float is_int is_integer is_double is_real is_numeric is_string is_array is_object is_scalar ereg ereg_replace eregi eregi_replace split spliti join sql_regcase dl pclose popen readfile rewind rmdir umask fclose feof fgetc fgets fgetss fread fopen fpassthru ftruncate fstat fseek ftell fflush fwrite fputs mkdir rename copy tempnam tmpfile file file_get_contents file_put_contents stream_select stream_context_create stream_context_set_params stream_context_set_option stream_context_get_options stream_filter_prepend stream_filter_append fgetcsv flock get_meta_tags stream_set_write_buffer set_file_buffer set_socket_blocking stream_set_blocking socket_set_blocking stream_get_meta_data stream_register_wrapper stream_wrapper_register stream_set_timeout socket_set_timeout socket_get_status realpath fnmatch fsockopen pfsockopen pack unpack get_browser crypt opendir closedir chdir getcwd rewinddir readdir dir glob fileatime filectime filegroup fileinode filemtime fileowner fileperms filesize filetype file_exists is_writable is_writeable is_readable is_executable is_file is_dir is_link stat lstat chown touch clearstatcache mail ob_start ob_flush ob_clean ob_end_flush ob_end_clean ob_get_flush ob_get_clean ob_get_length ob_get_level ob_get_status ob_get_contents ob_implicit_flush ob_list_handlers ksort krsort natsort natcasesort asort arsort sort rsort usort uasort uksort shuffle array_walk count end prev next reset current key min max in_array array_search extract compact array_fill range array_multisort array_push array_pop array_shift array_unshift array_splice array_slice array_merge array_merge_recursive array_keys array_values array_count_values array_reverse array_reduce array_pad array_flip array_change_key_case array_rand array_unique array_intersect array_intersect_assoc array_diff array_diff_assoc array_sum array_filter array_map array_chunk array_key_exists array_intersect_key array_combine array_column pos sizeof key_exists assert assert_options version_compare ftok str_rot13 aggregate session_name session_module_name session_save_path session_id session_regenerate_id session_decode session_register session_unregister session_is_registered session_encode session_start session_destroy session_unset session_set_save_handler session_cache_limiter session_cache_expire session_set_cookie_params session_get_cookie_params session_write_close preg_match preg_match_all preg_replace preg_replace_callback preg_split preg_quote preg_grep overload ctype_alnum ctype_alpha ctype_cntrl ctype_digit ctype_lower ctype_graph ctype_print ctype_punct ctype_space ctype_upper ctype_xdigit virtual apache_request_headers apache_note apache_lookup_uri apache_child_terminate apache_setenv apache_response_headers apache_get_version getallheaders mysql_connect mysql_pconnect mysql_close mysql_select_db mysql_create_db mysql_drop_db mysql_query mysql_unbuffered_query mysql_db_query mysql_list_dbs mysql_list_tables mysql_list_fields mysql_list_processes mysql_error mysql_errno mysql_affected_rows mysql_insert_id mysql_result mysql_num_rows mysql_num_fields mysql_fetch_row mysql_fetch_array mysql_fetch_assoc mysql_fetch_object mysql_data_seek mysql_fetch_lengths mysql_fetch_field mysql_field_seek mysql_free_result mysql_field_name mysql_field_table mysql_field_len mysql_field_type mysql_field_flags mysql_escape_string mysql_real_escape_string mysql_stat mysql_thread_id mysql_client_encoding mysql_get_client_info mysql_get_host_info mysql_get_proto_info mysql_get_server_info mysql_info mysql mysql_fieldname mysql_fieldtable mysql_fieldlen mysql_fieldtype mysql_fieldflags mysql_selectdb mysql_createdb mysql_dropdb mysql_freeresult mysql_numfields mysql_numrows mysql_listdbs mysql_listtables mysql_listfields mysql_db_name mysql_dbname mysql_tablename mysql_table_name pg_connect pg_pconnect pg_close pg_connection_status pg_connection_busy pg_connection_reset pg_host pg_dbname pg_port pg_tty pg_options pg_ping pg_query pg_send_query pg_cancel_query pg_fetch_result pg_fetch_row pg_fetch_assoc pg_fetch_array pg_fetch_object pg_fetch_all pg_affected_rows pg_get_result pg_result_seek pg_result_status pg_free_result pg_last_oid pg_num_rows pg_num_fields pg_field_name pg_field_num pg_field_size pg_field_type pg_field_prtlen pg_field_is_null pg_get_notify pg_get_pid pg_result_error pg_last_error pg_last_notice pg_put_line pg_end_copy pg_copy_to pg_copy_from pg_trace pg_untrace pg_lo_create pg_lo_unlink pg_lo_open pg_lo_close pg_lo_read pg_lo_write pg_lo_read_all pg_lo_import pg_lo_export pg_lo_seek pg_lo_tell pg_escape_string pg_escape_bytea pg_unescape_bytea pg_client_encoding pg_set_client_encoding pg_meta_data pg_convert pg_insert pg_update pg_delete pg_select pg_exec pg_getlastoid pg_cmdtuples pg_errormessage pg_numrows pg_numfields pg_fieldname pg_fieldsize pg_fieldtype pg_fieldnum pg_fieldprtlen pg_fieldisnull pg_freeresult pg_result pg_loreadall pg_locreate pg_lounlink pg_loopen pg_loclose pg_loread pg_lowrite pg_loimport pg_loexport http_response_code get_declared_traits getimagesizefromstring socket_import_stream stream_set_chunk_size trait_exists header_register_callback class_uses session_status session_register_shutdown echo print global static exit array empty eval isset unset die include require include_once require_once json_decode json_encode json_last_error json_last_error_msg curl_close curl_copy_handle curl_errno curl_error curl_escape curl_exec curl_file_create curl_getinfo curl_init curl_multi_add_handle curl_multi_close curl_multi_exec curl_multi_getcontent curl_multi_info_read curl_multi_init curl_multi_remove_handle curl_multi_select curl_multi_setopt curl_multi_strerror curl_pause curl_reset curl_setopt_array curl_setopt curl_share_close curl_share_init curl_share_setopt curl_strerror curl_unescape curl_version mysqli_affected_rows mysqli_autocommit mysqli_change_user mysqli_character_set_name mysqli_close mysqli_commit mysqli_connect_errno mysqli_connect_error mysqli_connect mysqli_data_seek mysqli_debug mysqli_dump_debug_info mysqli_errno mysqli_error_list mysqli_error mysqli_fetch_all mysqli_fetch_array mysqli_fetch_assoc mysqli_fetch_field_direct mysqli_fetch_field mysqli_fetch_fields mysqli_fetch_lengths mysqli_fetch_object mysqli_fetch_row mysqli_field_count mysqli_field_seek mysqli_field_tell mysqli_free_result mysqli_get_charset mysqli_get_client_info mysqli_get_client_stats mysqli_get_client_version mysqli_get_connection_stats mysqli_get_host_info mysqli_get_proto_info mysqli_get_server_info mysqli_get_server_version mysqli_info mysqli_init mysqli_insert_id mysqli_kill mysqli_more_results mysqli_multi_query mysqli_next_result mysqli_num_fields mysqli_num_rows mysqli_options mysqli_ping mysqli_prepare mysqli_query mysqli_real_connect mysqli_real_escape_string mysqli_real_query mysqli_reap_async_query mysqli_refresh mysqli_rollback mysqli_select_db mysqli_set_charset mysqli_set_local_infile_default mysqli_set_local_infile_handler mysqli_sqlstate mysqli_ssl_set mysqli_stat mysqli_stmt_init mysqli_store_result mysqli_thread_id mysqli_thread_safe mysqli_use_result mysqli_warning_count\";\n  CodeMirror.registerHelper(\"hintWords\", \"php\", [phpKeywords, phpAtoms, phpBuiltin].join(\" \").split(\" \"));\n  CodeMirror.registerHelper(\"wordChars\", \"php\", /[\\w$]/);\n\n  var phpConfig = {\n    name: \"clike\",\n    helperType: \"php\",\n    keywords: keywords(phpKeywords),\n    blockKeywords: keywords(\"catch do else elseif for foreach if switch try while finally\"),\n    defKeywords: keywords(\"class function interface namespace trait\"),\n    atoms: keywords(phpAtoms),\n    builtin: keywords(phpBuiltin),\n    multiLineStrings: true,\n    hooks: {\n      \"$\": function(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"variable-2\";\n      },\n      \"<\": function(stream, state) {\n        var before;\n        if (before = stream.match(/^<<\\s*/)) {\n          var quoted = stream.eat(/['\"]/);\n          stream.eatWhile(/[\\w\\.]/);\n          var delim = stream.current().slice(before[0].length + (quoted ? 2 : 1));\n          if (quoted) stream.eat(quoted);\n          if (delim) {\n            (state.tokStack || (state.tokStack = [])).push(delim, 0);\n            state.tokenize = phpString(delim, quoted != \"'\");\n            return \"string\";\n          }\n        }\n        return false;\n      },\n      \"#\": function(stream) {\n        while (!stream.eol() && !stream.match(\"?>\", false)) stream.next();\n        return \"comment\";\n      },\n      \"/\": function(stream) {\n        if (stream.eat(\"/\")) {\n          while (!stream.eol() && !stream.match(\"?>\", false)) stream.next();\n          return \"comment\";\n        }\n        return false;\n      },\n      '\"': function(_stream, state) {\n        (state.tokStack || (state.tokStack = [])).push('\"', 0);\n        state.tokenize = phpString('\"');\n        return \"string\";\n      },\n      \"{\": function(_stream, state) {\n        if (state.tokStack && state.tokStack.length)\n          state.tokStack[state.tokStack.length - 1]++;\n        return false;\n      },\n      \"}\": function(_stream, state) {\n        if (state.tokStack && state.tokStack.length > 0 &&\n            !--state.tokStack[state.tokStack.length - 1]) {\n          state.tokenize = phpString(state.tokStack[state.tokStack.length - 2]);\n        }\n        return false;\n      }\n    }\n  };\n\n  CodeMirror.defineMode(\"php\", function(config, parserConfig) {\n    var htmlMode = CodeMirror.getMode(config, (parserConfig && parserConfig.htmlMode) || \"text/html\");\n    var phpMode = CodeMirror.getMode(config, phpConfig);\n\n    function dispatch(stream, state) {\n      var isPHP = state.curMode == phpMode;\n      if (stream.sol() && state.pending && state.pending != '\"' && state.pending != \"'\") state.pending = null;\n      if (!isPHP) {\n        if (stream.match(/^<\\?\\w*/)) {\n          state.curMode = phpMode;\n          if (!state.php) state.php = CodeMirror.startState(phpMode, htmlMode.indent(state.html, \"\", \"\"))\n          state.curState = state.php;\n          return \"meta\";\n        }\n        if (state.pending == '\"' || state.pending == \"'\") {\n          while (!stream.eol() && stream.next() != state.pending) {}\n          var style = \"string\";\n        } else if (state.pending && stream.pos < state.pending.end) {\n          stream.pos = state.pending.end;\n          var style = state.pending.style;\n        } else {\n          var style = htmlMode.token(stream, state.curState);\n        }\n        if (state.pending) state.pending = null;\n        var cur = stream.current(), openPHP = cur.search(/<\\?/), m;\n        if (openPHP != -1) {\n          if (style == \"string\" && (m = cur.match(/[\\'\\\"]$/)) && !/\\?>/.test(cur)) state.pending = m[0];\n          else state.pending = {end: stream.pos, style: style};\n          stream.backUp(cur.length - openPHP);\n        }\n        return style;\n      } else if (isPHP && state.php.tokenize == null && stream.match(\"?>\")) {\n        state.curMode = htmlMode;\n        state.curState = state.html;\n        if (!state.php.context.prev) state.php = null;\n        return \"meta\";\n      } else {\n        return phpMode.token(stream, state.curState);\n      }\n    }\n\n    return {\n      startState: function() {\n        var html = CodeMirror.startState(htmlMode)\n        var php = parserConfig.startOpen ? CodeMirror.startState(phpMode) : null\n        return {html: html,\n                php: php,\n                curMode: parserConfig.startOpen ? phpMode : htmlMode,\n                curState: parserConfig.startOpen ? php : html,\n                pending: null};\n      },\n\n      copyState: function(state) {\n        var html = state.html, htmlNew = CodeMirror.copyState(htmlMode, html),\n            php = state.php, phpNew = php && CodeMirror.copyState(phpMode, php), cur;\n        if (state.curMode == htmlMode) cur = htmlNew;\n        else cur = phpNew;\n        return {html: htmlNew, php: phpNew, curMode: state.curMode, curState: cur,\n                pending: state.pending};\n      },\n\n      token: dispatch,\n\n      indent: function(state, textAfter, line) {\n        if ((state.curMode != phpMode && /^\\s*<\\//.test(textAfter)) ||\n            (state.curMode == phpMode && /^\\?>/.test(textAfter)))\n          return htmlMode.indent(state.html, textAfter, line);\n        return state.curMode.indent(state.curState, textAfter, line);\n      },\n\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n\n      innerMode: function(state) { return {state: state.curState, mode: state.curMode}; }\n    };\n  }, \"htmlmixed\", \"clike\");\n\n  CodeMirror.defineMIME(\"application/x-httpd-php\", \"php\");\n  CodeMirror.defineMIME(\"application/x-httpd-php-open\", {name: \"php\", startOpen: true});\n  CodeMirror.defineMIME(\"text/x-php\", phpConfig);\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nvar htmlConfig = {\n  autoSelfClosers: {'area': true, 'base': true, 'br': true, 'col': true, 'command': true,\n                    'embed': true, 'frame': true, 'hr': true, 'img': true, 'input': true,\n                    'keygen': true, 'link': true, 'meta': true, 'param': true, 'source': true,\n                    'track': true, 'wbr': true, 'menuitem': true},\n  implicitlyClosed: {'dd': true, 'li': true, 'optgroup': true, 'option': true, 'p': true,\n                     'rp': true, 'rt': true, 'tbody': true, 'td': true, 'tfoot': true,\n                     'th': true, 'tr': true},\n  contextGrabbers: {\n    'dd': {'dd': true, 'dt': true},\n    'dt': {'dd': true, 'dt': true},\n    'li': {'li': true},\n    'option': {'option': true, 'optgroup': true},\n    'optgroup': {'optgroup': true},\n    'p': {'address': true, 'article': true, 'aside': true, 'blockquote': true, 'dir': true,\n          'div': true, 'dl': true, 'fieldset': true, 'footer': true, 'form': true,\n          'h1': true, 'h2': true, 'h3': true, 'h4': true, 'h5': true, 'h6': true,\n          'header': true, 'hgroup': true, 'hr': true, 'menu': true, 'nav': true, 'ol': true,\n          'p': true, 'pre': true, 'section': true, 'table': true, 'ul': true},\n    'rp': {'rp': true, 'rt': true},\n    'rt': {'rp': true, 'rt': true},\n    'tbody': {'tbody': true, 'tfoot': true},\n    'td': {'td': true, 'th': true},\n    'tfoot': {'tbody': true},\n    'th': {'td': true, 'th': true},\n    'thead': {'tbody': true, 'tfoot': true},\n    'tr': {'tr': true}\n  },\n  doNotIndent: {\"pre\": true},\n  allowUnquoted: true,\n  allowMissing: true,\n  caseFold: true\n}\n\nvar xmlConfig = {\n  autoSelfClosers: {},\n  implicitlyClosed: {},\n  contextGrabbers: {},\n  doNotIndent: {},\n  allowUnquoted: false,\n  allowMissing: false,\n  allowMissingTagName: false,\n  caseFold: false\n}\n\nCodeMirror.defineMode(\"xml\", function(editorConf, config_) {\n  var indentUnit = editorConf.indentUnit\n  var config = {}\n  var defaults = config_.htmlMode ? htmlConfig : xmlConfig\n  for (var prop in defaults) config[prop] = defaults[prop]\n  for (var prop in config_) config[prop] = config_[prop]\n\n  // Return variables for tokenizers\n  var type, setStyle;\n\n  function inText(stream, state) {\n    function chain(parser) {\n      state.tokenize = parser;\n      return parser(stream, state);\n    }\n\n    var ch = stream.next();\n    if (ch == \"<\") {\n      if (stream.eat(\"!\")) {\n        if (stream.eat(\"[\")) {\n          if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));\n          else return null;\n        } else if (stream.match(\"--\")) {\n          return chain(inBlock(\"comment\", \"-->\"));\n        } else if (stream.match(\"DOCTYPE\", true, true)) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          return chain(doctype(1));\n        } else {\n          return null;\n        }\n      } else if (stream.eat(\"?\")) {\n        stream.eatWhile(/[\\w\\._\\-]/);\n        state.tokenize = inBlock(\"meta\", \"?>\");\n        return \"meta\";\n      } else {\n        type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n        state.tokenize = inTag;\n        return \"tag bracket\";\n      }\n    } else if (ch == \"&\") {\n      var ok;\n      if (stream.eat(\"#\")) {\n        if (stream.eat(\"x\")) {\n          ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n        } else {\n          ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n        }\n      } else {\n        ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n      }\n      return ok ? \"atom\" : \"error\";\n    } else {\n      stream.eatWhile(/[^&<]/);\n      return null;\n    }\n  }\n  inText.isInText = true;\n\n  function inTag(stream, state) {\n    var ch = stream.next();\n    if (ch == \">\" || (ch == \"/\" && stream.eat(\">\"))) {\n      state.tokenize = inText;\n      type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n      return \"tag bracket\";\n    } else if (ch == \"=\") {\n      type = \"equals\";\n      return null;\n    } else if (ch == \"<\") {\n      state.tokenize = inText;\n      state.state = baseState;\n      state.tagName = state.tagStart = null;\n      var next = state.tokenize(stream, state);\n      return next ? next + \" tag error\" : \"tag error\";\n    } else if (/[\\'\\\"]/.test(ch)) {\n      state.tokenize = inAttribute(ch);\n      state.stringStartCol = stream.column();\n      return state.tokenize(stream, state);\n    } else {\n      stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n      return \"word\";\n    }\n  }\n\n  function inAttribute(quote) {\n    var closure = function(stream, state) {\n      while (!stream.eol()) {\n        if (stream.next() == quote) {\n          state.tokenize = inTag;\n          break;\n        }\n      }\n      return \"string\";\n    };\n    closure.isInAttribute = true;\n    return closure;\n  }\n\n  function inBlock(style, terminator) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        if (stream.match(terminator)) {\n          state.tokenize = inText;\n          break;\n        }\n        stream.next();\n      }\n      return style;\n    }\n  }\n\n  function doctype(depth) {\n    return function(stream, state) {\n      var ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == \"<\") {\n          state.tokenize = doctype(depth + 1);\n          return state.tokenize(stream, state);\n        } else if (ch == \">\") {\n          if (depth == 1) {\n            state.tokenize = inText;\n            break;\n          } else {\n            state.tokenize = doctype(depth - 1);\n            return state.tokenize(stream, state);\n          }\n        }\n      }\n      return \"meta\";\n    };\n  }\n\n  function Context(state, tagName, startOfLine) {\n    this.prev = state.context;\n    this.tagName = tagName || \"\";\n    this.indent = state.indented;\n    this.startOfLine = startOfLine;\n    if (config.doNotIndent.hasOwnProperty(tagName) || (state.context && state.context.noIndent))\n      this.noIndent = true;\n  }\n  function popContext(state) {\n    if (state.context) state.context = state.context.prev;\n  }\n  function maybePopContext(state, nextTagName) {\n    var parentTagName;\n    while (true) {\n      if (!state.context) {\n        return;\n      }\n      parentTagName = state.context.tagName;\n      if (!config.contextGrabbers.hasOwnProperty(parentTagName) ||\n          !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n        return;\n      }\n      popContext(state);\n    }\n  }\n\n  function baseState(type, stream, state) {\n    if (type == \"openTag\") {\n      state.tagStart = stream.column();\n      return tagNameState;\n    } else if (type == \"closeTag\") {\n      return closeTagNameState;\n    } else {\n      return baseState;\n    }\n  }\n  function tagNameState(type, stream, state) {\n    if (type == \"word\") {\n      state.tagName = stream.current();\n      setStyle = \"tag\";\n      return attrState;\n    } else if (config.allowMissingTagName && type == \"endTag\") {\n      setStyle = \"tag bracket\";\n      return attrState(type, stream, state);\n    } else {\n      setStyle = \"error\";\n      return tagNameState;\n    }\n  }\n  function closeTagNameState(type, stream, state) {\n    if (type == \"word\") {\n      var tagName = stream.current();\n      if (state.context && state.context.tagName != tagName &&\n          config.implicitlyClosed.hasOwnProperty(state.context.tagName))\n        popContext(state);\n      if ((state.context && state.context.tagName == tagName) || config.matchClosing === false) {\n        setStyle = \"tag\";\n        return closeState;\n      } else {\n        setStyle = \"tag error\";\n        return closeStateErr;\n      }\n    } else if (config.allowMissingTagName && type == \"endTag\") {\n      setStyle = \"tag bracket\";\n      return closeState(type, stream, state);\n    } else {\n      setStyle = \"error\";\n      return closeStateErr;\n    }\n  }\n\n  function closeState(type, _stream, state) {\n    if (type != \"endTag\") {\n      setStyle = \"error\";\n      return closeState;\n    }\n    popContext(state);\n    return baseState;\n  }\n  function closeStateErr(type, stream, state) {\n    setStyle = \"error\";\n    return closeState(type, stream, state);\n  }\n\n  function attrState(type, _stream, state) {\n    if (type == \"word\") {\n      setStyle = \"attribute\";\n      return attrEqState;\n    } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n      var tagName = state.tagName, tagStart = state.tagStart;\n      state.tagName = state.tagStart = null;\n      if (type == \"selfcloseTag\" ||\n          config.autoSelfClosers.hasOwnProperty(tagName)) {\n        maybePopContext(state, tagName);\n      } else {\n        maybePopContext(state, tagName);\n        state.context = new Context(state, tagName, tagStart == state.indented);\n      }\n      return baseState;\n    }\n    setStyle = \"error\";\n    return attrState;\n  }\n  function attrEqState(type, stream, state) {\n    if (type == \"equals\") return attrValueState;\n    if (!config.allowMissing) setStyle = \"error\";\n    return attrState(type, stream, state);\n  }\n  function attrValueState(type, stream, state) {\n    if (type == \"string\") return attrContinuedState;\n    if (type == \"word\" && config.allowUnquoted) {setStyle = \"string\"; return attrState;}\n    setStyle = \"error\";\n    return attrState(type, stream, state);\n  }\n  function attrContinuedState(type, stream, state) {\n    if (type == \"string\") return attrContinuedState;\n    return attrState(type, stream, state);\n  }\n\n  return {\n    startState: function(baseIndent) {\n      var state = {tokenize: inText,\n                   state: baseState,\n                   indented: baseIndent || 0,\n                   tagName: null, tagStart: null,\n                   context: null}\n      if (baseIndent != null) state.baseIndent = baseIndent\n      return state\n    },\n\n    token: function(stream, state) {\n      if (!state.tagName && stream.sol())\n        state.indented = stream.indentation();\n\n      if (stream.eatSpace()) return null;\n      type = null;\n      var style = state.tokenize(stream, state);\n      if ((style || type) && style != \"comment\") {\n        setStyle = null;\n        state.state = state.state(type || style, stream, state);\n        if (setStyle)\n          style = setStyle == \"error\" ? style + \" error\" : setStyle;\n      }\n      return style;\n    },\n\n    indent: function(state, textAfter, fullLine) {\n      var context = state.context;\n      // Indent multi-line strings (e.g. css).\n      if (state.tokenize.isInAttribute) {\n        if (state.tagStart == state.indented)\n          return state.stringStartCol + 1;\n        else\n          return state.indented + indentUnit;\n      }\n      if (context && context.noIndent) return CodeMirror.Pass;\n      if (state.tokenize != inTag && state.tokenize != inText)\n        return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0;\n      // Indent the starts of attribute names.\n      if (state.tagName) {\n        if (config.multilineTagIndentPastTag !== false)\n          return state.tagStart + state.tagName.length + 2;\n        else\n          return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n      }\n      if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n      var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n      if (tagAfter && tagAfter[1]) { // Closing tag spotted\n        while (context) {\n          if (context.tagName == tagAfter[2]) {\n            context = context.prev;\n            break;\n          } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {\n            context = context.prev;\n          } else {\n            break;\n          }\n        }\n      } else if (tagAfter) { // Opening tag spotted\n        while (context) {\n          var grabbers = config.contextGrabbers[context.tagName];\n          if (grabbers && grabbers.hasOwnProperty(tagAfter[2]))\n            context = context.prev;\n          else\n            break;\n        }\n      }\n      while (context && context.prev && !context.startOfLine)\n        context = context.prev;\n      if (context) return context.indent + indentUnit;\n      else return state.baseIndent || 0;\n    },\n\n    electricInput: /<\\/[\\s\\w:]+>$/,\n    blockCommentStart: \"<!--\",\n    blockCommentEnd: \"-->\",\n\n    configuration: config.htmlMode ? \"html\" : \"xml\",\n    helperType: config.htmlMode ? \"html\" : \"xml\",\n\n    skipAttribute: function(state) {\n      if (state.state == attrValueState)\n        state.state = attrState\n    },\n\n    xmlCurrentTag: function(state) {\n      return state.tagName ? {name: state.tagName, close: state.type == \"closeTag\"} : null\n    },\n\n    xmlCurrentContext: function(state) {\n      var context = []\n      for (var cx = state.context; cx; cx = cx.prev)\n        context.push(cx.tagName)\n      return context.reverse()\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/xml\", \"xml\");\nCodeMirror.defineMIME(\"application/xml\", \"xml\");\nif (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\"))\n  CodeMirror.defineMIME(\"text/html\", {name: \"xml\", htmlMode: true});\n\n});\n"],"sourceRoot":"webpack:///","file":"node_modules_codemirror_mode_php_php_js.e5841d7787a8cb5f5e83.js"}