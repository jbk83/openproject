{"version":3,"mappings":"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","names":["q","P","constructor","super","autoHidePopups","commentSortDescending","hideMail","timeZone","warnOnLeavingUnsaved","notifications","dailyReminders","enabled","times","workdays","immediateReminders","mentioned","pauseReminders","E","name","i","this","select","notificationSettings$","pipe","d","t","filter","o","_links","project","href","_","groupBy","title","find","J","Set","map","a","dailyReminders$","de","store","get","setLoading","preferenceAPI","subscribe","update","toastService","addError","add","patch","addSuccess","I18n","apiV3Service","users","id","preferences","f","e","factory","X","value","window","K","storeService","query","projectNotifications$","removeAll","Z","selectors","add_setting","please_select","already_selected","userId","selectProject","selected","emit","active","mapProjectsFn","Object","disabled","settings","controls","disabledReason","text","y","notify_me","save","mentioned_header","description","notifyImmediately","alsoNotifyFor","dateAlerts","assignee","responsible","watched_header","work_package_commented_header","work_package_created_header","work_package_processed_header","work_package_prioritized_header","work_package_scheduled_header","remove_project_settings","startDate","dueDate","overdue","ngOnInit","eeShowBanners","bannersService","projectLink","pathHelper","projectPath","fe","addProjectSettings","push","s","workPackageCreated","workPackageProcessed","workPackageScheduled","workPackagePrioritized","workPackageCommented","availableTimes","availableTimesOverdue","removeProjectSettings","removeAt","I","W","l","r","time","projectSettings","watched","work_package_commented","work_package_created","work_package_processed","work_package_prioritized","work_package_scheduled","projectSpecific","teaser_text","upgrade_to_ee_text","more_info_link","pe","form","disable","uiRouterGlobals","params","currentUserService","user$","valueChanges","dateAlertsStatuses","notificationsForGlobal$","untilDestroyed","setValue","u","p","m","U","D","F","Y","M","R","$","G","clear","sort","localeCompare","forEach","setControl","changeDetectorRef","detectChanges","enable","saveChanges","getValue","newsAdded","newsCommented","documentAdded","forumMessages","wikiPageAdded","wikiPageUpdated","membershipAdded","membershipUpdated","T","ee","explanation","rootFormGroup","control","C","j","v","setupAvailableTimes","S","no_time_zone","configurationService","isTimezoneSet","timeLabel","counter","addTime","enabled$","selectedTimes$","inactiveTimes","position","splice","ie","timeRemovable$","O","length","nonAddable$","activeTimes$","firstAvailableSuggested","firstAfterSelected","storeTimes","concat","changeTime","isActive","removeTime","shift","toggleActive","toTime","dateForHour","parseInt","split","isDisabled","includes","emitEvent","suggestedTimes","indexOf","Array","from","toLocaleTimeString","hour12","hour","minute","Date","setTime","Q","utc","hours","format","label","date_placeholder","first_day","last_day","selectedDates$","firstDay","lastDay","setDates","patchValue","N","b","buildISOWeekdays","formGroup","indexOfLocalWorkday","isoWorkdays","controlForLocalWorkday","at","fb","group","array","emailAlerts","n","te","globalNotification$","selectLoading","buildForm","formInitialized","cdRef","x","buildWorkdays","buildPauses","reduce","pt","url","component","w","imports","g","se","ae","oe","states"],"sources":["./src/app/features/user-preferences/state/user-preferences.store.ts","./src/app/features/user-preferences/state/user-preferences.query.ts","./src/app/features/user-preferences/state/user-preferences.service.ts","./src/app/features/user-preferences/notifications-settings/overdue-reminder-available-times.ts","./src/app/features/user-preferences/notifications-settings/toolbar/notifications-settings-toolbar.component.ts","./src/app/features/user-preferences/notifications-settings/toolbar/notifications-settings-toolbar.component.html","./src/app/features/user-preferences/notifications-settings/inline-create/notification-setting-inline-create.component.html","./src/app/features/user-preferences/notifications-settings/inline-create/notification-setting-inline-create.component.ts","./src/app/features/user-preferences/notifications-settings/table/notification-settings-table.component.html","./src/app/features/user-preferences/notifications-settings/table/notification-settings-table.component.ts","./src/app/features/user-preferences/notifications-settings/page/notifications-settings-page.component.html","./src/app/features/user-preferences/notifications-settings/page/notifications-settings-page.component.ts","./src/app/features/user-preferences/reminder-settings/email-alerts/email-alerts-settings.component.html","./src/app/features/user-preferences/reminder-settings/email-alerts/email-alerts-settings.component.ts","./src/app/features/user-preferences/reminder-settings/immediate-reminders/immediate-reminder-settings.component.ts","./src/app/features/user-preferences/reminder-settings/immediate-reminders/immediate-reminder-settings.component.html","./src/app/features/user-preferences/reminder-settings/reminder-time/reminder-settings-daily-time.component.html","./src/app/features/user-preferences/reminder-settings/reminder-time/reminder-settings-daily-time.component.ts","./src/app/features/user-preferences/reminder-settings/pause-reminders/pause-reminders.component.ts","./src/app/features/user-preferences/reminder-settings/workdays/workdays-settings.component.html","./src/app/features/user-preferences/reminder-settings/pause-reminders/pause-reminders.component.html","./src/app/features/user-preferences/reminder-settings/workdays/workdays-settings.component.ts","./src/app/features/user-preferences/reminder-settings/page/reminder-settings-page.component.html","./src/app/features/user-preferences/reminder-settings/page/reminder-settings-page.component.ts","./src/app/shared/helpers/rxjs/filterWith.ts","./src/app/features/user-preferences/user-preferences.routes.ts","./src/app/features/user-preferences/user-preferences.module.ts"],"sourcesContent":["// -- copyright\n// OpenProject is an open source project management software.\n// Copyright (C) 2012-2022 the OpenProject GmbH\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License version 3.\n//\n// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:\n// Copyright (C) 2006-2013 Jean-Philippe Lang\n// Copyright (C) 2010-2013 the ChiliProject Team\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License\n// as published by the Free Software Foundation; either version 2\n// of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n//\n// See COPYRIGHT and LICENSE files for more details.\n//++\n\nimport {\n  Store,\n  StoreConfig,\n} from '@datorama/akita';\nimport { IUserPreference } from 'core-app/features/user-preferences/state/user-preferences.model';\n\nfunction createInitialState():IUserPreference {\n  return {\n    autoHidePopups: true,\n    commentSortDescending: false,\n    hideMail: true,\n    timeZone: null,\n    warnOnLeavingUnsaved: true,\n    notifications: [],\n    dailyReminders: {\n      enabled: true,\n      times: ['08:00'],\n    },\n    workdays: [1, 2, 3, 4, 5],\n    immediateReminders: {\n      mentioned: false,\n    },\n    pauseReminders: {\n      enabled: false,\n    },\n  };\n}\n\n@StoreConfig({ name: 'notification-settings' })\nexport class UserPreferencesStore extends Store<IUserPreference> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Query } from '@datorama/akita';\nimport {\n  filter,\n  map,\n} from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { UserPreferencesStore } from 'core-app/features/user-preferences/state/user-preferences.store';\nimport { IUserPreference } from 'core-app/features/user-preferences/state/user-preferences.model';\nimport { INotificationSetting } from 'core-app/features/user-preferences/state/notification-setting.model';\n\nexport class UserPreferencesQuery extends Query<IUserPreference> {\n  notificationSettings$ = this.select('notifications');\n\n  notificationsGroupedByProject$:Observable<{ [key:string]:INotificationSetting[] }> = this\n    .notificationSettings$\n    .pipe(\n      map((settings) => settings.filter((setting) => setting._links.project.href)),\n      map((settings) => _.groupBy(settings, (setting) => setting._links.project.title)),\n    );\n\n  /** Notification settings grouped by Project */\n  notificationsForGlobal$:Observable<INotificationSetting|undefined> = this\n    .notificationSettings$\n    .pipe(\n      map((notifications) => notifications.find((setting) => setting._links.project.href === null)),\n    );\n\n  projectNotifications$ = this\n    .notificationSettings$\n    .pipe(\n      map((settings) => settings.filter((setting) => setting._links.project.href !== null)),\n    );\n\n  globalNotification$ = this\n    .notificationSettings$\n    .pipe(\n      map((settings) => settings.find((notification) => !notification._links.project.href)),\n      filter((global) => !!global),\n    ) as Observable<INotificationSetting>;\n\n  /** Selected projects */\n  selectedProjects$ = this\n    .notificationSettings$\n    .pipe(\n      map((notifications) => (\n        new Set(notifications.map((setting) => setting._links.project?.href))\n      )),\n    );\n\n  /** All daily reminders settings */\n  dailyReminders$ = this.select('dailyReminders');\n\n  dailyRemindersEnabled$ = this\n    .dailyReminders$\n    .pipe(\n      map((reminders) => reminders.enabled),\n    );\n\n  dailyRemindersTimes$ = this\n    .dailyReminders$\n    .pipe(\n      map((reminders) => reminders.times),\n    );\n\n  preferences$ = this.select();\n\n  constructor(protected store:UserPreferencesStore) {\n    super(store);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ApiV3Service } from 'core-app/core/apiv3/api-v3.service';\nimport { ToastService } from 'core-app/shared/components/toaster/toast.service';\nimport { ApiV3UserPreferencesPaths } from 'core-app/core/apiv3/endpoints/users/apiv3-user-preferences-paths';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { IUserPreference } from 'core-app/features/user-preferences/state/user-preferences.model';\nimport { UserPreferencesStore } from 'core-app/features/user-preferences/state/user-preferences.store';\nimport { UserPreferencesQuery } from 'core-app/features/user-preferences/state/user-preferences.query';\n\n@Injectable({ providedIn: 'root' })\nexport class UserPreferencesService {\n  readonly store = new UserPreferencesStore();\n\n  readonly query = new UserPreferencesQuery(this.store);\n\n  constructor(\n    private apiV3Service:ApiV3Service,\n    private toastService:ToastService,\n    private I18n:I18nService,\n  ) {\n  }\n\n  get(user:string):void {\n    this.store.setLoading(true);\n    this.preferenceAPI(user)\n      .get()\n      .subscribe(\n        (prefs) => this.store.update(prefs),\n        (error) => this.toastService.addError(error),\n      )\n      .add(\n        () => this.store.setLoading(false),\n      );\n  }\n\n  update(user:string, delta:Partial<IUserPreference>):void {\n    this.store.setLoading(true);\n    this\n      .preferenceAPI(user)\n      .patch(delta)\n      .subscribe(\n        (prefs) => {\n          this.store.update(prefs);\n          this.toastService.addSuccess(this.I18n.t('js.notice_successful_update'));\n        },\n        (error) => this.toastService.addError(error),\n      )\n      .add(() => this.store.setLoading(false));\n  }\n\n  private preferenceAPI(user:string):ApiV3UserPreferencesPaths {\n    return this\n      .apiV3Service\n      .users\n      .id(user)\n      .preferences;\n  }\n}\n","export const REMINDER_AVAILABLE_TIMEFRAMES:{ value:string, title:string }[] = [\n  {\n    value: 'PT0S',\n    title: window.I18n.t('js.notifications.settings.reminders.timeframes.normal.PT0S'),\n  },\n  {\n    value: 'P1D',\n    title: window.I18n.t('js.notifications.settings.reminders.timeframes.normal.P1D'),\n  },\n  {\n    value: 'P3D',\n    title: window.I18n.t('js.notifications.settings.reminders.timeframes.normal.P3D'),\n  },\n  {\n    value: 'P7D',\n    title: window.I18n.t('js.notifications.settings.reminders.timeframes.normal.P7D'),\n  },\n];\n\nexport const OVERDUE_REMINDER_AVAILABLE_TIMEFRAMES:{ value:string, title:string }[] = [\n  {\n    value: 'P1D',\n    title: window.I18n.t('js.notifications.settings.reminders.timeframes.overdue.P1D'),\n  },\n  {\n    value: 'P3D',\n    title: window.I18n.t('js.notifications.settings.reminders.timeframes.overdue.P3D'),\n  },\n  {\n    value: 'P7D',\n    title: window.I18n.t('js.notifications.settings.reminders.timeframes.overdue.P7D'),\n  },\n];\n","import {\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { UserPreferencesService } from 'core-app/features/user-preferences/state/user-preferences.service';\n\n@Component({\n  selector: 'op-notifications-settings-toolbar',\n  templateUrl: './notifications-settings-toolbar.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationsSettingsToolbarComponent {\n  projectSettings$ = this.storeService.query.projectNotifications$;\n\n  text = {\n    title: this.I18n.t('js.notifications.settings.title'),\n  };\n\n  constructor(\n    private storeService:UserPreferencesService,\n    private I18n:I18nService,\n  ) {\n  }\n\n  removeAll():void {\n    this.storeService.store.update(\n      ({ notifications }) => ({\n        notifications: notifications.filter((notification) => notification._links.project.href === null),\n      }),\n    );\n  }\n}\n","<div class=\"toolbar-container\">\n  <div class=\"toolbar\">\n    <div class=\"title-container\">\n      <h2 [textContent]=\"text.title\"></h2>\n    </div>\n  </div>\n</div>\n","<div class=\"wp-inline-create-button\">\n  <button\n      *ngIf=\"!active\"\n      (click)=\"active = true\"\n      class=\"spot-link\"\n      type=\"button\"\n  >\n    <span class=\"spot-icon spot-icon_add\"></span>\n    <span [textContent]=\"text.add_setting\"></span>\n  </button>\n\n  <op-project-autocompleter\n    *ngIf=\"active\"\n\n    (valueChange)=\"selectProject($event)\"\n    (keydown.escape)=\"active = false\"\n\n    [apiFilters]=\"APIFilters\"\n    [mapResultsFn]=\"this.mapProjectsFn.bind(this)\"\n\n    [placeholder]=\"text.please_select\"\n    dropdownPosition=\"top\"\n  ></op-project-autocompleter>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { FormArray } from '@angular/forms';\nimport { ApiV3ListFilter } from 'core-app/core/apiv3/paths/apiv3-list-resource.interface';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { HalSourceLink } from 'core-app/features/hal/resources/hal-resource';\nimport { IProjectAutocompleteItem } from 'core-app/shared/components/autocompleter/project-autocompleter/project-autocomplete-item';\n\nexport interface NotificationSettingProjectOption {\n  name:string;\n  href:string;\n}\n\n@Component({\n  selector: 'op-notification-setting-inline-create',\n  templateUrl: './notification-setting-inline-create.component.html',\n  styleUrls: ['./notification-setting-inline-create.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationSettingInlineCreateComponent {\n  @Input() userId:string;\n\n  @Input() settings:FormArray;\n\n  @Output() selected = new EventEmitter<HalSourceLink>();\n\n  /** Active inline-create mode */\n  active = false;\n\n  text = {\n    add_setting: this.I18n.t('js.notifications.settings.project_specific.add'),\n    please_select: this.I18n.t('js.placeholders.selection'),\n    already_selected: this.I18n.t('js.notifications.settings.project_specific.already_selected'),\n  };\n\n  public get APIFilters():ApiV3ListFilter[] {\n    return [['visible', '=', [this.userId]]];\n  }\n\n  constructor(\n    private I18n:I18nService,\n  ) { }\n\n  selectProject($event:NotificationSettingProjectOption):void {\n    this.selected.emit({ title: $event.name, href: $event.href });\n    this.active = false;\n  }\n\n  public mapProjectsFn(projects:IProjectAutocompleteItem[]):IProjectAutocompleteItem[] {\n    return projects.map((project) => ({\n      ...project,\n      disabled: !!this.settings.controls.find(\n        (projectSetting) => (projectSetting.get('project')!.value as NotificationSettingProjectOption).href === project.href,\n      ),\n      disabledReason: this.text.already_selected,\n    }));\n  }\n}\n","<div\n  class=\"op-scrollable-table\"\n  *ngIf=\"settings.length > 0\"\n>\n  <table class=\"op-table\">\n    <thead>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_heading\">\n          {{ text.notify_me }}\n        </th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <th class=\"op-table--cell op-table--cell_heading\">\n            <a\n              class=\"spot-link\"\n              [href]=\"projectLink(item.controls.project.value.href)\"\n            >{{ item.controls.project.value.title }}</a>\n          </th>\n        </ng-container>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">\n          <h5>{{ text.notifyImmediately.title }}</h5>\n          <p>{{ text.notifyImmediately.description }}</p>\n        </th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\"></td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">\n          {{ text.mentioned_header.title }}\n        </th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\"><input type=\"checkbox\" disabled checked /></td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">{{ text.watched_header }}</th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\"><input type=\"checkbox\" disabled checked /></td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">\n          {{ text.assignee }}\n        </th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\" [formGroup]=\"item\">\n            <input\n              type=\"checkbox\"\n              formControlName=\"assignee\"\n              data-qa-project-notification-type=\"assignee\"\n              [attr.data-qa-project]=\"item.controls.project.value.title\"\n            />\n          </td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">\n          {{ text.responsible }}\n        </th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\" [formGroup]=\"item\">\n            <input\n              type=\"checkbox\"\n              formControlName=\"responsible\"\n              data-qa-project-notification-type=\"responsible\"\n              [attr.data-qa-project]=\"item.controls.project.value.title\"\n            />\n          </td>\n        </ng-container>\n      </tr>\n\n      <tr *ngIf=\"!eeShowBanners\">\n        <th class=\"op-table--cell op-table--cell_soft-heading\">\n          <h5>{{ text.dateAlerts.title }}</h5>\n          <p>{{ text.dateAlerts.description }}</p>\n        </th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\"></td>\n        </ng-container>\n      </tr>\n\n      <tr *ngIf=\"!eeShowBanners\">\n        <th class=\"op-table--cell op-table--cell_soft-heading\">\n          {{ text.startDate }}\n        </th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell--date-alerts\" [formGroup]=\"item\">\n            <select\n              formControlName=\"startDate\"\n              class=\"op-reminder-settings-table-date-alerts--time form--select\"\n              data-qa-project-notification-type=\"op-reminder-settings-start-date-alerts\"\n              [attr.data-qa-project]=\"item.controls.project.value.title\"\n              required=\"true\"\n            >\n              <option\n                *ngFor=\"let availableTime of availableTimes\"\n                [ngValue]=\"availableTime.value\"\n              >\n                {{availableTime.title}}\n              </option>\n            </select>\n          </td>\n        </ng-container>\n      </tr>\n\n      <tr *ngIf=\"!eeShowBanners\">\n        <th class=\"op-table--cell op-table--cell_soft-heading\">\n          {{ text.dueDate }}\n        </th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell--date-alerts\" [formGroup]=\"item\">\n            <select\n              formControlName=\"dueDate\"\n              class=\"op-reminder-settings-table-date-alerts--time form--select\"\n              data-qa-project-notification-type=\"op-reminder-settings-due-date-alerts\"\n              [attr.data-qa-project]=\"item.controls.project.value.title\"\n              required=\"true\"\n            >\n              <option\n                *ngFor=\"let availableTime of availableTimes\"\n                [ngValue]=\"availableTime.value\"\n              >\n                {{availableTime.title}}\n              </option>\n            </select>\n          </td>\n        </ng-container>\n      </tr>\n\n      <tr *ngIf=\"!eeShowBanners\">\n        <th class=\"op-table--cell op-table--cell_soft-heading\">\n          {{ text.overdue }}\n        </th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell--date-alerts\" [formGroup]=\"item\">\n            <select\n              formControlName=\"overdue\"\n              class=\"op-reminder-settings-table-date-alerts--time form--select\"\n              data-qa-project-notification-type=\"op-reminder-settings-overdue-alerts\"\n              [attr.data-qa-project]=\"item.controls.project.value.title\"\n              required=\"true\"\n            >\n              <option\n                *ngFor=\"let availableTime of availableTimesOverdue\"\n                [ngValue]=\"availableTime.value\"\n              >\n                {{availableTime.title}}\n              </option>\n            </select>\n          </td>\n        </ng-container>\n      </tr>\n\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">\n          <h5>{{ text.alsoNotifyFor.title }}</h5>\n          <p>{{ text.alsoNotifyFor.description }}</p>\n        </th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\"></td>\n        </ng-container>\n      </tr>\n\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">{{ text.work_package_created_header }}</th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\" [formGroup]=\"item\">\n            <input\n              type=\"checkbox\"\n              formControlName=\"workPackageCreated\"\n              data-qa-project-notification-type=\"work_package_created\"\n              [attr.data-qa-project]=\"item.controls.project.value.title\"\n            />\n          </td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">{{ text.work_package_processed_header }}</th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\" [formGroup]=\"item\">\n            <input\n              type=\"checkbox\"\n              formControlName=\"workPackageProcessed\"\n              data-qa-project-notification-type=\"work_package_processed\"\n              [attr.data-qa-project]=\"item.controls.project.value.title\"\n            />\n          </td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">{{ text.work_package_scheduled_header }}</th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\" [formGroup]=\"item\">\n            <input\n              type=\"checkbox\"\n              formControlName=\"workPackageScheduled\"\n              data-qa-project-notification-type=\"work_package_scheduled\"\n              [attr.data-qa-project]=\"item.controls.project.value.title\"\n            />\n          </td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">{{ text.work_package_prioritized_header }}</th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\" [formGroup]=\"item\">\n            <input\n              type=\"checkbox\"\n              formControlName=\"workPackagePrioritized\"\n              data-qa-project-notification-type=\"work_package_prioritized\"\n              [attr.data-qa-project]=\"item.controls.project.value.title\"\n            />\n          </td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\">{{ text.work_package_commented_header }}</th>\n        <ng-container *ngFor=\"let item of settings.controls\">\n          <td class=\"op-table--cell\" [formGroup]=\"item\">\n            <input\n              type=\"checkbox\"\n              formControlName=\"workPackageCommented\"\n              data-qa-project-notification-type=\"work_package_commented\"\n              [attr.data-qa-project]=\"item.controls.project.value.title\"\n            />\n          </td>\n        </ng-container>\n      </tr>\n      <tr>\n        <th class=\"op-table--cell op-table--cell_soft-heading\"></th>\n        <ng-container *ngFor=\"let item of settings.controls; let index = index\">\n          <td class=\"op-table--cell\">\n            <button\n              type=\"button\"\n              class=\"spot-link\"\n              (click)=\"removeProjectSettings(index)\"\n            >\n              {{ text.remove_project_settings }}\n            </button>\n          </td>\n        </ng-container>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<op-notification-setting-inline-create\n  *ngIf=\"userId\"\n  [userId]=\"userId\"\n  [settings]=\"settings\"\n  (selected)=\"addProjectSettings($event)\"\n  data-qa-selector=\"notification-setting-inline-create\"\n></op-notification-setting-inline-create>\n","// noinspection ES6UnusedImports\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormArray, FormGroup, FormControl } from '@angular/forms';\nimport { PathHelperService } from 'core-app/core/path-helper/path-helper.service';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport idFromLink from 'core-app/features/hal/helpers/id-from-link';\nimport { HalSourceLink } from 'core-app/features/hal/resources/hal-resource';\nimport { BannersService } from 'core-app/core/enterprise/banners.service';\nimport { OVERDUE_REMINDER_AVAILABLE_TIMEFRAMES, REMINDER_AVAILABLE_TIMEFRAMES } from '../overdue-reminder-available-times';\n\n@Component({\n  selector: 'op-notification-settings-table',\n  templateUrl: './notification-settings-table.component.html',\n  styleUrls: ['./notification-settings-table.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationSettingsTableComponent implements OnInit {\n  @Input() userId:string;\n\n  @Input() settings:FormArray;\n\n  public eeShowBanners = false;\n\n  public availableTimes = [\n    {\n      value: null,\n      title: this.I18n.t('js.notifications.settings.reminders.no_notification'),\n    },\n    ...REMINDER_AVAILABLE_TIMEFRAMES,\n  ];\n\n  public availableTimesOverdue = [\n    {\n      value: null,\n      title: this.I18n.t('js.notifications.settings.reminders.no_notification'),\n    },\n    ...OVERDUE_REMINDER_AVAILABLE_TIMEFRAMES,\n  ];\n\n  text = {\n    notify_me: this.I18n.t('js.notifications.settings.notify_me'),\n    save: this.I18n.t('js.button_save'),\n    mentioned_header: {\n      title: this.I18n.t('js.notifications.settings.reasons.mentioned.title'),\n      description: this.I18n.t('js.notifications.settings.reasons.mentioned.description'),\n    },\n    notifyImmediately: {\n      title: this.I18n.t('js.notifications.settings.global.immediately.title'),\n      description: this.I18n.t('js.notifications.settings.global.immediately.description'),\n    },\n    alsoNotifyFor: {\n      title: this.I18n.t('js.notifications.settings.global.delayed.title'),\n      description: this.I18n.t('js.notifications.settings.global.delayed.description'),\n    },\n    dateAlerts: {\n      title: this.I18n.t('js.notifications.settings.global.date_alerts.title'),\n      description: this.I18n.t('js.notifications.settings.global.date_alerts.description'),\n    },\n    assignee: this.I18n.t('js.notifications.settings.reasons.assignee'),\n    responsible: this.I18n.t('js.notifications.settings.reasons.responsible'),\n    watched_header: this.I18n.t('js.notifications.settings.reasons.watched'),\n    work_package_commented_header: this.I18n.t('js.notifications.settings.reasons.work_package_commented'),\n    work_package_created_header: this.I18n.t('js.notifications.settings.reasons.work_package_created'),\n    work_package_processed_header: this.I18n.t('js.notifications.settings.reasons.work_package_processed'),\n    work_package_prioritized_header: this.I18n.t('js.notifications.settings.reasons.work_package_prioritized'),\n    work_package_scheduled_header: this.I18n.t('js.notifications.settings.reasons.work_package_scheduled'),\n    remove_project_settings: this.I18n.t('js.notifications.settings.project_specific.remove'),\n    startDate: this.I18n.t('js.work_packages.properties.startDate'),\n    dueDate: this.I18n.t('js.work_packages.properties.dueDate'),\n    overdue: this.I18n.t('js.notifications.settings.global.overdue'),\n  };\n\n  constructor(\n    private I18n:I18nService,\n    private pathHelper:PathHelperService,\n    readonly bannersService:BannersService,\n  ) {}\n\n  ngOnInit():void {\n    this.eeShowBanners = this.bannersService.eeShowBanners;\n  }\n\n  projectLink(href:string) {\n    return this.pathHelper.projectPath(idFromLink(href));\n  }\n\n  addProjectSettings(project:HalSourceLink):void {\n    this.settings.push(new FormGroup({\n      project: new FormControl(project),\n      assignee: new FormControl(false),\n      responsible: new FormControl(false),\n      workPackageCreated: new FormControl(false),\n      workPackageProcessed: new FormControl(false),\n      workPackageScheduled: new FormControl(false),\n      workPackagePrioritized: new FormControl(false),\n      workPackageCommented: new FormControl(false),\n      startDate: new FormControl(this.availableTimes[2].value),\n      dueDate: new FormControl(this.availableTimes[2].value),\n      overdue: new FormControl(this.availableTimesOverdue[0].value),\n    }));\n  }\n\n  removeProjectSettings(index:number):void {\n    this.settings.removeAt(index);\n  }\n}\n","<op-notifications-settings-toolbar></op-notifications-settings-toolbar>\n<form\n  [formGroup]=\"form\"\n  (ngSubmit)=\"saveChanges()\"\n  class=\"op-form\"\n>\n  <h5>{{ text.notifyImmediately.title }}</h5>\n  <p>{{ text.notifyImmediately.description }}</p>\n\n  <spot-selector-field\n    class=\"op-notifications-settings--bold-label\"\n    [label]=\"text.mentioned.title\">\n      <input\n        disabled\n        checked\n        type=\"checkbox\"\n        slot=\"input\"\n      />\n  </spot-selector-field>\n\n  <spot-selector-field\n    [label]=\"text.watched\"\n    [control]=\"form.get('watched')\">\n    <input\n      disabled\n      checked\n      type=\"checkbox\"\n      slot=\"input\"\n    />\n  </spot-selector-field>\n\n  <spot-selector-field\n    [label]=\"text.assignee\"\n    [control]=\"form.get('assignee')\"\n  >\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"assignee\"\n      data-qa-global-notification-type=\"assignee\"\n    />\n  </spot-selector-field>\n\n  <spot-selector-field\n    [label]=\"text.responsible\"\n    [control]=\"form.get('responsible')\"\n  >\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"responsible\"\n      data-qa-global-notification-type=\"responsible\"\n    />\n  </spot-selector-field>\n\n  <h5>{{ text.dateAlerts.title }}</h5>\n  <p>{{ text.dateAlerts.description }}</p>\n  <div *ngIf=\"!eeShowBanners\">\n    <div\n      class=\"op-reminder-settings-date-alerts--row\"\n      formGroupName=\"startDate\"\n    >\n      <input\n        type=\"checkbox\"\n        formControlName=\"active\"\n        class=\"op-reminder-settings-date-alerts--active\"\n        data-qa-global-notification-type=\"op-settings-start-date-active\"\n        id=\"op-settings-start-date\"\n      />\n      <label\n        class=\"op-reminder-settings-date-alerts--label\"\n        [textContent]=\"text.startDate\"\n        for=\"op-settings-start-date\"\n      ></label>\n      <select\n        formControlName=\"time\"\n        class=\"op-reminder-settings-date-alerts--time form--select -narrow\"\n        data-qa-global-notification-type= \"op-reminder-settings-start-date-alerts\"\n        required=\"true\"\n        *ngIf=\"dateAlertsStatuses.startDate\"\n      >\n        <option\n          *ngFor=\"let availableTime of availableTimes\"\n          [value]=\"availableTime.value\"\n        >\n          {{availableTime.title}}\n        </option>\n      </select>\n    </div>\n\n    <div\n      class=\"op-reminder-settings-date-alerts--row\"\n      formGroupName=\"dueDate\"\n    >\n      <input\n        type=\"checkbox\"\n        formControlName=\"active\"\n        class=\"op-reminder-settings-date-alerts--active\"\n        data-qa-global-notification-type= \"op-settings-due-date-active\"\n        id=\"op-settings-due-date\"\n      />\n      <label\n        class=\"op-reminder-settings-date-alerts--label\"\n        [textContent]=\"text.dueDate\"\n        for=\"op-settings-due-date\"\n      ></label>\n      <select\n        formControlName=\"time\"\n        class=\"op-reminder-settings-date-alerts--time form--select -narrow\"\n        data-qa-global-notification-type= \"op-reminder-settings-due-date-alerts\"\n        required=\"true\"\n        *ngIf=\"dateAlertsStatuses.dueDate\"\n      >\n        <option\n          *ngFor=\"let availableTime of availableTimes\"\n          [value]=\"availableTime.value\">\n          {{availableTime.title}}\n        </option>\n      </select>\n    </div>\n\n    <div\n      class=\"op-reminder-settings-date-alerts--row\"\n      formGroupName=\"overdue\"\n    >\n      <input\n        formControlName=\"active\"\n        type=\"checkbox\"\n        class=\"op-reminder-settings-date-alerts--active\"\n        data-qa-global-notification-type=\"op-settings-overdue-date-active\"\n        id=\"op-settings-overdue-date\">\n      <label\n        class=\"op-reminder-settings-date-alerts--label\"\n        [textContent]=\"text.overdue\"\n        for=\"op-settings-overdue-date\"\n      ></label>\n      <select\n        formControlName=\"time\"\n        class=\"op-reminder-settings-date-alerts--time form--select -narrow\"\n        data-qa-global-notification-type=\"op-reminder-settings-overdue-alerts\"\n        required=\"true\"\n        *ngIf=\"dateAlertsStatuses.overdue\"\n      >\n        <option\n          *ngFor=\"let availableTime of availableTimesOverdue\"\n          [value]=\"availableTime.value\">\n          {{availableTime.title}}\n        </option>\n      </select>\n    </div>\n  </div>\n\n  <op-enterprise-banner\n    *ngIf=\"eeShowBanners\"\n    [moreInfoLink]=\"text.more_info_link\"\n    [collapsible]=\"true\"\n    [textMessage]=\"text.teaser_text\"\n    opReferrer=\"notifications#date-alerts\"\n    class=\"op-date-alert-ee-banner\">\n  </op-enterprise-banner>\n\n  <h5>{{ text.alsoNotifyFor.title }}</h5>\n  <p>{{ text.alsoNotifyFor.description }}</p>\n\n  <spot-selector-field\n    [label]=\"text.work_package_created\"\n    [control]=\"form.get('workPackageCreated')\">\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"workPackageCreated\"\n      data-qa-global-notification-type=\"work_package_created\"\n    />\n  </spot-selector-field>\n\n  <spot-selector-field\n    [label]=\"text.work_package_processed\"\n    [control]=\"form.get('workPackageProcessed')\">\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"workPackageProcessed\"\n      data-qa-global-notification-type=\"work_package_processed\"\n    />\n  </spot-selector-field>\n\n  <spot-selector-field\n    [label]=\"text.work_package_scheduled\"\n    [control]=\"form.get('workPackageScheduled')\">\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"workPackageScheduled\"\n      data-qa-global-notification-type=\"work_package_scheduled\"\n    />\n  </spot-selector-field>\n\n  <spot-selector-field\n    [label]=\"text.work_package_prioritized\"\n    [control]=\"form.get('workPackagePrioritized')\">\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"workPackagePrioritized\"\n      data-qa-global-notification-type=\"work_package_prioritized\"\n    />\n  </spot-selector-field>\n\n  <spot-selector-field\n    [label]=\"text.work_package_commented\"\n    [control]=\"form.get('workPackageCommented')\">\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"workPackageCommented\"\n      data-qa-global-notification-type=\"work_package_commented\"\n    />\n  </spot-selector-field>\n\n\n  <h5>{{text.projectSpecific.title}}</h5>\n  <p>{{text.projectSpecific.description}}</p>\n\n  <op-notification-settings-table\n    *ngIf=\"userId\"\n    [userId]=\"userId\"\n    [settings]=\"form.controls.projectSettings\"\n    formArrayName=\"projectSettings\"\n    class=\"op-notification-settings-page--table\"\n  ></op-notification-settings-table>\n\n  <div class=\"generic-table--action-buttons\">\n    <button\n      class=\"button -highlight\"\n      [textContent]=\"text.save\"\n      type=\"submit\"\n    ></button>\n  </div>\n</form>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport {\n  FormArray,\n  FormControl,\n  FormGroup,\n} from '@angular/forms';\nimport { take } from 'rxjs/internal/operators/take';\nimport { UIRouterGlobals } from '@uirouter/core';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { CurrentUserService } from 'core-app/core/current-user/current-user.service';\nimport { UntilDestroyedMixin } from 'core-app/shared/helpers/angular/until-destroyed.mixin';\nimport { UserPreferencesService } from 'core-app/features/user-preferences/state/user-preferences.service';\nimport { INotificationSetting } from 'core-app/features/user-preferences/state/notification-setting.model';\nimport { BannersService } from 'core-app/core/enterprise/banners.service';\nimport { enterpriseDocsUrl } from 'core-app/core/setup/globals/constants.const';\nimport { OVERDUE_REMINDER_AVAILABLE_TIMEFRAMES, REMINDER_AVAILABLE_TIMEFRAMES } from '../overdue-reminder-available-times';\n\nexport const myNotificationsPageComponentSelector = 'op-notifications-page';\n\ninterface IToastSettingsValue {\n  assignee:boolean;\n  responsible:boolean;\n  workPackageCreated:boolean;\n  workPackageProcessed:boolean;\n  workPackageScheduled:boolean;\n  workPackagePrioritized:boolean;\n  workPackageCommented:boolean;\n}\n\ninterface IProjectNotificationSettingsValue extends IToastSettingsValue {\n  project:{\n    title:string;\n    href:string;\n  };\n  startDate:string|null;\n  dueDate:string|null;\n  overdue:string|null;\n}\n\ninterface IFullNotificationSettingsValue extends IToastSettingsValue {\n  projectSettings:IProjectNotificationSettingsValue[];\n  startDate:{ active:boolean, time:string };\n  dueDate:{ active:boolean, time:string };\n  overdue:{ active:boolean, time:string };\n}\n\n@Component({\n  selector: myNotificationsPageComponentSelector,\n  templateUrl: './notifications-settings-page.component.html',\n  styleUrls: ['./notifications-settings-page.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationsSettingsPageComponent extends UntilDestroyedMixin implements OnInit {\n  @Input() userId:string;\n\n  public availableTimes = REMINDER_AVAILABLE_TIMEFRAMES;\n\n  public availableTimesOverdue = OVERDUE_REMINDER_AVAILABLE_TIMEFRAMES;\n\n  public eeShowBanners = false;\n\n  public form = new FormGroup({\n    assignee: new FormControl(false),\n    responsible: new FormControl(false),\n    workPackageCreated: new FormControl(false),\n    workPackageProcessed: new FormControl(false),\n    workPackageScheduled: new FormControl(false),\n    workPackagePrioritized: new FormControl(false),\n    workPackageCommented: new FormControl(false),\n    startDate: new FormGroup({\n      active: new FormControl(false),\n      time: new FormControl(this.availableTimes[1]),\n    }),\n    dueDate: new FormGroup({\n      active: new FormControl(false),\n      time: new FormControl(this.availableTimes[1]),\n    }),\n    overdue: new FormGroup({\n      active: new FormControl(false),\n      time: new FormControl(this.availableTimesOverdue[0]),\n    }),\n    projectSettings: new FormArray([]),\n  });\n\n  text = {\n    notifyImmediately: {\n      title: this.I18n.t('js.notifications.settings.global.immediately.title'),\n      description: this.I18n.t('js.notifications.settings.global.immediately.description'),\n    },\n    alsoNotifyFor: {\n      title: this.I18n.t('js.notifications.settings.global.delayed.title'),\n      description: this.I18n.t('js.notifications.settings.global.delayed.description'),\n    },\n    dateAlerts: {\n      title: this.I18n.t('js.notifications.settings.global.date_alerts.title'),\n      description: this.I18n.t('js.notifications.settings.global.date_alerts.description'),\n    },\n    mentioned: {\n      title: this.I18n.t('js.notifications.settings.reasons.mentioned.title'),\n      description: this.I18n.t('js.notifications.settings.reasons.mentioned.description'),\n    },\n    watched: this.I18n.t('js.notifications.settings.reasons.watched'),\n    work_package_commented: this.I18n.t('js.notifications.settings.reasons.work_package_commented'),\n    work_package_created: this.I18n.t('js.notifications.settings.reasons.work_package_created'),\n    work_package_processed: this.I18n.t('js.notifications.settings.reasons.work_package_processed'),\n    work_package_prioritized: this.I18n.t('js.notifications.settings.reasons.work_package_prioritized'),\n    work_package_scheduled: this.I18n.t('js.notifications.settings.reasons.work_package_scheduled'),\n    save: this.I18n.t('js.button_save'),\n    projectSpecific: {\n      title: this.I18n.t('js.notifications.settings.project_specific.title'),\n      description: this.I18n.t('js.notifications.settings.project_specific.description'),\n    },\n    assignee: this.I18n.t('js.notifications.settings.reasons.assignee'),\n    responsible: this.I18n.t('js.notifications.settings.reasons.responsible'),\n    startDate: this.I18n.t('js.work_packages.properties.startDate'),\n    dueDate: this.I18n.t('js.work_packages.properties.dueDate'),\n    overdue: this.I18n.t('js.notifications.settings.global.overdue'),\n    teaser_text: this.I18n.t('js.notifications.settings.global.date_alerts.teaser_text'),\n    upgrade_to_ee_text: this.I18n.t('js.boards.upsale.upgrade'),\n    more_info_link: enterpriseDocsUrl.website,\n  };\n\n  dateAlertsStatuses = {\n    startDate: false,\n    dueDate: false,\n    overdue: false,\n  };\n\n  constructor(\n    private changeDetectorRef:ChangeDetectorRef,\n    private I18n:I18nService,\n    private storeService:UserPreferencesService,\n    private currentUserService:CurrentUserService,\n    private uiRouterGlobals:UIRouterGlobals,\n    readonly bannersService:BannersService,\n  ) {\n    super();\n  }\n\n  ngOnInit():void {\n    this.form.disable();\n    this.userId = (this.userId || this.uiRouterGlobals.params.userId) as string;\n    this.eeShowBanners = this.bannersService.eeShowBanners;\n\n    this\n      .currentUserService\n      .user$\n      .pipe(take(1))\n      .subscribe((user) => {\n        this.userId = this.userId || user.id!;\n        this.storeService.get(this.userId);\n      });\n\n    this.form.get('startDate.active')?.valueChanges.subscribe((newValue) => {\n      this.dateAlertsStatuses.startDate = !!newValue;\n    });\n\n    this.form.get('dueDate.active')?.valueChanges.subscribe((newValue) => {\n      this.dateAlertsStatuses.dueDate = !!newValue;\n    });\n\n    this.form.get('overdue.active')?.valueChanges.subscribe((newValue) => {\n      this.dateAlertsStatuses.overdue = !!newValue;\n    });\n\n    this.storeService.query.notificationsForGlobal$\n      .pipe(this.untilDestroyed())\n      .subscribe((settings) => {\n        if (!settings) {\n          return;\n        }\n\n        this.form.get('assignee')?.setValue(settings.assignee);\n        this.form.get('responsible')?.setValue(settings.responsible);\n        this.form.get('workPackageCreated')?.setValue(settings.workPackageCreated);\n        this.form.get('workPackageProcessed')?.setValue(settings.workPackageProcessed);\n        this.form.get('workPackageScheduled')?.setValue(settings.workPackageScheduled);\n        this.form.get('workPackagePrioritized')?.setValue(settings.workPackagePrioritized);\n        this.form.get('workPackageCommented')?.setValue(settings.workPackageCommented);\n\n        this.form.get('startDate.active')?.setValue(!!settings.startDate);\n        this.form.get('startDate.time')?.setValue(settings.startDate || this.availableTimes[1].value);\n\n        this.form.get('dueDate.active')?.setValue(!!settings.dueDate);\n        this.form.get('dueDate.time')?.setValue(settings.dueDate || this.availableTimes[1].value);\n\n        this.form.get('overdue.active')?.setValue(!!settings.overdue);\n        this.form.get('overdue.time')?.setValue(settings.overdue || this.availableTimesOverdue[0].value);\n      });\n\n    this.storeService.query.projectNotifications$\n      .pipe(this.untilDestroyed())\n      .subscribe((settings) => {\n        if (!settings) {\n          return;\n        }\n\n        const projectSettings = new FormArray([]);\n        projectSettings.clear();\n        settings\n          .sort(\n            (a, b):number => a._links.project.title!.localeCompare(b._links.project.title!),\n          )\n          .forEach((setting) => projectSettings.push(new FormGroup({\n            project: new FormControl(setting._links.project),\n            assignee: new FormControl(setting.assignee),\n            responsible: new FormControl(setting.responsible),\n            workPackageCreated: new FormControl(setting.workPackageCreated),\n            workPackageProcessed: new FormControl(setting.workPackageProcessed),\n            workPackageScheduled: new FormControl(setting.workPackageScheduled),\n            workPackagePrioritized: new FormControl(setting.workPackagePrioritized),\n            workPackageCommented: new FormControl(setting.workPackageCommented),\n            startDate: new FormControl(setting.startDate),\n            dueDate: new FormControl(setting.dueDate),\n            overdue: new FormControl(setting.overdue),\n          })));\n\n        this.form.setControl('projectSettings', projectSettings);\n        this.changeDetectorRef.detectChanges();\n      });\n\n    this.form.enable();\n  }\n\n  public saveChanges():void {\n    const prefs = this.storeService.store.getValue();\n    const notificationSettings = (this.form.value as IFullNotificationSettingsValue);\n    const globalNotification = prefs.notifications.find((notification) => !notification._links.project.href) as INotificationSetting;\n    const globalPrefs:INotificationSetting = {\n      ...globalNotification,\n      _links: { project: { href: null } },\n      watched: true,\n      mentioned: true,\n      assignee: notificationSettings.assignee,\n      responsible: notificationSettings.responsible,\n      workPackageCreated: notificationSettings.workPackageCreated,\n      workPackageProcessed: notificationSettings.workPackageProcessed,\n      workPackageScheduled: notificationSettings.workPackageScheduled,\n      workPackagePrioritized: notificationSettings.workPackagePrioritized,\n      workPackageCommented: notificationSettings.workPackageCommented,\n      startDate: notificationSettings.startDate.active ? notificationSettings.startDate.time : null,\n      dueDate: notificationSettings.dueDate.active ? notificationSettings.dueDate.time : null,\n      overdue: notificationSettings.overdue.active ? notificationSettings.overdue.time : null,\n    };\n\n    const projectPrefs:INotificationSetting[] = notificationSettings.projectSettings.map((settings) => ({\n      _links: { project: { href: settings.project.href } },\n      watched: true,\n      mentioned: true,\n      assignee: settings.assignee,\n      responsible: settings.responsible,\n      workPackageCreated: settings.workPackageCreated,\n      workPackageProcessed: settings.workPackageProcessed,\n      workPackageScheduled: settings.workPackageScheduled,\n      workPackagePrioritized: settings.workPackagePrioritized,\n      workPackageCommented: settings.workPackageCommented,\n      newsAdded: false,\n      newsCommented: false,\n      documentAdded: false,\n      forumMessages: false,\n      wikiPageAdded: false,\n      wikiPageUpdated: false,\n      membershipAdded: false,\n      membershipUpdated: false,\n      startDate: settings.startDate,\n      dueDate: settings.dueDate,\n      overdue: settings.overdue,\n    }));\n\n    this.storeService.update(this.userId, {\n      ...prefs,\n      notifications: [\n        globalPrefs,\n        ...projectPrefs,\n      ],\n    });\n  }\n}\n","<ng-container [formGroup]=\"form\">\n  <div class=\"op-form--section-header\">\n    <h5 [textContent]=\"text.title\"></h5>\n    <p [textContent]=\"text.explanation\"></p>\n  </div>\n\n  <spot-selector-field\n    [label]=\"text[setting]\"\n    [control]=\"form.get(setting)\"\n    *ngFor=\"let setting of alerts\"\n  >\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      [formControlName]=\"setting\"\n    />\n  </spot-selector-field>\n</ng-container>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n} from '@angular/core';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { UserPreferencesService } from 'core-app/features/user-preferences/state/user-preferences.service';\nimport {\n  FormGroup,\n  FormGroupDirective,\n} from '@angular/forms';\n\nexport type EmailAlertType =\n  'newsAdded'|'newsCommented'|'documentAdded'|'forumMessages'|'wikiPageAdded'|\n  'wikiPageUpdated'|'membershipAdded'|'membershipUpdated';\n\nexport const emailAlerts:EmailAlertType[] = [\n  'newsAdded',\n  'newsCommented',\n  'documentAdded',\n  'forumMessages',\n  'wikiPageAdded',\n  'wikiPageUpdated',\n  'membershipAdded',\n  'membershipUpdated',\n];\n\n@Component({\n  selector: 'op-email-alerts-settings',\n  templateUrl: './email-alerts-settings.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class EmailAlertsSettingsComponent implements OnInit {\n  form:FormGroup;\n\n  alerts:EmailAlertType[] = emailAlerts;\n\n  text = {\n    title: this.I18n.t('js.reminders.settings.alerts.title'),\n    explanation: this.I18n.t('js.reminders.settings.alerts.explanation'),\n    newsAdded: this.I18n.t('js.reminders.settings.alerts.news_added'),\n    newsCommented: this.I18n.t('js.reminders.settings.alerts.news_commented'),\n    documentAdded: this.I18n.t('js.reminders.settings.alerts.document_added'),\n    forumMessages: this.I18n.t('js.reminders.settings.alerts.forum_messages'),\n    wikiPageAdded: this.I18n.t('js.reminders.settings.alerts.wiki_page_added'),\n    wikiPageUpdated: this.I18n.t('js.reminders.settings.alerts.wiki_page_updated'),\n    membershipAdded: this.I18n.t('js.reminders.settings.alerts.membership_added'),\n    membershipUpdated: this.I18n.t('js.reminders.settings.alerts.membership_updated'),\n  };\n\n  constructor(\n    private I18n:I18nService,\n    private storeService:UserPreferencesService,\n    private rootFormGroup:FormGroupDirective,\n  ) {\n  }\n\n  ngOnInit():void {\n    this.form = this.rootFormGroup.control.get('emailAlerts') as FormGroup;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n} from '@angular/core';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { UserPreferencesService } from 'core-app/features/user-preferences/state/user-preferences.service';\nimport {\n  FormGroup,\n  FormGroupDirective,\n} from '@angular/forms';\n\n@Component({\n  selector: 'op-immediate-reminder-settings',\n  templateUrl: './immediate-reminder-settings.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ImmediateReminderSettingsComponent implements OnInit {\n  form:FormGroup;\n\n  text = {\n    title: this.I18n.t('js.reminders.settings.immediate.title'),\n    explanation: this.I18n.t('js.reminders.settings.immediate.explanation'),\n    mentioned: this.I18n.t('js.reminders.settings.immediate.mentioned'),\n  };\n\n  constructor(\n    private I18n:I18nService,\n    private storeService:UserPreferencesService,\n    private rootFormGroup:FormGroupDirective,\n  ) {\n  }\n\n  ngOnInit():void {\n    this.form = this.rootFormGroup.control.get('immediateReminders') as FormGroup;\n  }\n}\n","<ng-container [formGroup]=\"form\">\n  <div class=\"op-form--section-header\">\n    <h5 [textContent]=\"text.title\"></h5>\n  </div>\n\n  <spot-selector-field\n    [label]=\"text.mentioned\"\n    [control]=\"form.get('mentioned')\"\n  >\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"mentioned\"\n      data-qa-immediate-reminder=\"mentioned\"\n    />\n  </spot-selector-field>\n</ng-container>\n","<ng-container\n  *ngIf=\"(selectedTimes$ | async) as selectedTimes\"\n  [formGroup]=\"form\"\n>\n  <div class=\"op-form--section-header\">\n      <h5 [textContent]=\"text.title\"></h5>\n      <p [textContent]=\"text.explanation\"></p>\n  </div>\n\n  <spot-selector-field\n    [label]=\"text.enable\"\n    [control]=\"form.get('enabled')\">\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"enabled\"\n    />\n  </spot-selector-field>\n\n  <div\n    *ngFor=\"let time of selectedTimes; index as i; trackBy: index\"\n    class=\"op-reminder-settings-daily-time--row\"\n  >\n    <input\n      *ngIf=\"(activeTimes$ | async) as activeTimes\"\n      type=\"checkbox\"\n      [ngModel]=\"isActive(time)\"\n      (ngModelChange)=\"toggleActive($event, i, selectedTimes)\"\n      [ngModelOptions]=\"{standalone: true}\"\n      [disabled]=\"isDisabled(time, activeTimes)\"\n      class=\"op-reminder-settings-daily-time--active\"\n      attr.data-qa-selector=\"op-settings-daily-time--active-{{i + 1}}\">\n    <label\n      class=\"op-reminder-settings-daily-time--label\"\n      [textContent]=\"text.timeLabel(i + 1)\"\n      attr.for=\"op-reminder-settings-daily-time-{{i + 1}}--time\">\n    </label>\n    <select\n      [ngModel]=\"time\"\n      (ngModelChange)=\"changeTime($event, selectedTimes, i)\"\n      [ngModelOptions]=\"{standalone: true}\"\n      [disabled]=\"(enabled$ | async) === false\"\n      class=\"op-reminder-settings-daily-time--time form--select -narrow\"\n      attr.id=\"op-reminder-settings-daily-time-{{i + 1}}--time\"\n      required=\"true\">\n      <option\n        *ngFor=\"let availableTime of availableTimes\"\n        [value]=\"availableTime\"\n        [disabled]=\"time !== availableTime && selectedTimes.includes(availableTime)\">\n        {{timeLabel(availableTime)}}\n      </option>\n    </select>\n    <button\n      class=\"spot-link op-reminder-settings-daily-time--remove\"\n      type=\"button\"\n      *ngIf=\"timeRemovable$ | async\"\n      (click)=\"removeTime(selectedTimes, i)\"\n      attr.data-qa-selector=\"op-settings-daily-time--remove-{{i + 1}}\">\n      <op-icon icon-classes=\"icon-small icon-remove icon4\"></op-icon>\n    </button>\n  </div>\n\n  <button\n    class=\"button op-reminder-settings-daily-time--add\"\n    type=\"button\"\n    [disabled]=\"nonAddable$ | async\"\n    (click)=\"addTime(selectedTimes)\">\n    <i class=\"button--icon icon-add\"></i>\n    <span class=\"button--text\">{{text.addTime}}</span>\n  </button>\n</ng-container>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n} from '@angular/core';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport {\n  map,\n  shareReplay,\n  startWith,\n} from 'rxjs/operators';\nimport {\n  combineLatest,\n  NEVER,\n  Observable,\n} from 'rxjs';\nimport { UserPreferencesService } from 'core-app/features/user-preferences/state/user-preferences.service';\nimport {\n  FormArray,\n  FormControl,\n  FormGroup,\n  FormGroupDirective,\n} from '@angular/forms';\nimport { ConfigurationService } from 'core-app/core/config/configuration.service';\nimport * as moment from 'moment';\n\n@Component({\n  selector: 'op-reminder-settings-daily-time',\n  templateUrl: './reminder-settings-daily-time.component.html',\n  styleUrls: ['./reminder-settings-daily-time.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReminderSettingsDailyTimeComponent implements OnInit {\n  // All times that are available in a day with a 1 hour gap between each.\n  // ['00:00', '01:00', ..., '24:00']\n  public availableTimes:string[] = ReminderSettingsDailyTimeComponent.setupAvailableTimes();\n\n  // The times (hours) that the user deactivated. Those are only stored within the component\n  // as the inactive hours are not persisted. This list is then interleaved with the list\n  // of times stored in the backend. As the order of the times should be kept,\n  // the position needs to be maintained.\n  // Upon a reload of the page, it is accepted to loose this information.\n  public inactiveTimes:Array<{ position:number, time:string }> = [];\n\n  public form:FormGroup;\n\n  // Hours suggested if a new time is added by a user.\n  public suggestedTimes = ['08:00', '12:00', '15:00', '18:00'];\n\n  // Whether the reminder are active at all.\n  public enabled$:Observable<boolean>;\n\n  // The active times as present in the store interleaved with the inactive\n  // times.\n  public selectedTimes$:Observable<string[]> = NEVER;\n\n  // Times that are truly active:\n  // * the reminders are not disabled completely\n  // * the times are not inactive individually.\n  public activeTimes$:Observable<string[]> = NEVER;\n\n  // Times can only be removed if the element is active and if there is more than one time present.\n  public timeRemovable$:Observable<boolean> = NEVER;\n\n  // Times can not be added if the element is disabled or if all the possible times have already been added (active or not).\n  public nonAddable$:Observable<boolean> = NEVER;\n\n  text = {\n    title: this.I18n.t('js.reminders.settings.daily.title'),\n    explanation: this.I18n.t('js.reminders.settings.daily.explanation',\n      { no_time_zone: this.configurationService.isTimezoneSet() ? '' : this.I18n.t('js.reminders.settings.daily.no_time_zone') }),\n    timeLabel: (counter:number):string => this.I18n.t('js.reminders.settings.daily.time_label', { counter }),\n    addTime: this.I18n.t('js.reminders.settings.daily.add_time'),\n    enable: this.I18n.t('js.reminders.settings.daily.enable'),\n  };\n\n  constructor(\n    private I18n:I18nService,\n    private storeService:UserPreferencesService,\n    private rootFormGroup:FormGroupDirective,\n    private configurationService:ConfigurationService,\n  ) {\n  }\n\n  ngOnInit():void {\n    this.form = this.rootFormGroup.control.get('dailyReminders') as FormGroup;\n\n    this.enabled$ = this\n      .form\n      .valueChanges\n      .pipe(\n        startWith(() => this.form.get('enabled')?.value as boolean),\n        map(() => this.form.get('enabled')?.value as boolean),\n        shareReplay(1),\n      );\n\n    this.selectedTimes$ = (this\n      .form\n      .get('times') as FormArray)\n      .valueChanges\n      .pipe(\n        startWith(() => this.form.get('times')?.value as FormArray),\n        map(() => {\n          const timesArray = this.form.get('times') as FormArray;\n          const activeTimes = timesArray.controls.map((c) => c.value as string);\n\n          this\n            .inactiveTimes\n            .sort((a, b) => a.position - b.position)\n            .forEach((inactiveTime) => {\n              activeTimes.splice(inactiveTime.position, 0, inactiveTime.time);\n            });\n\n          return activeTimes;\n        }),\n        shareReplay(1),\n      );\n\n    this.timeRemovable$ = combineLatest([\n      this.enabled$,\n      this.selectedTimes$,\n    ]).pipe(map(([enabled, selectedTimes]) => enabled && selectedTimes.length > 1));\n\n    this.nonAddable$ = combineLatest([\n      this.enabled$,\n      this.selectedTimes$,\n    ]).pipe(map(([enabled, selectedTimes]) => !enabled || selectedTimes.length === this.availableTimes.length));\n\n    this.activeTimes$ = combineLatest([\n      this.enabled$,\n      this.selectedTimes$,\n    ]).pipe(\n      map(([enabled, times]) => (enabled ? times : [])),\n    );\n  }\n\n  addTime(selectedTimes:string[]):void {\n    const time = this.firstAvailableSuggested(selectedTimes) || this.firstAfterSelected(selectedTimes);\n\n    if (time) {\n      this.storeTimes(selectedTimes.concat(time));\n    }\n  }\n\n  changeTime(newTime:string, selectedTimes:string[], index:number):void {\n    selectedTimes.splice(index, 1, newTime);\n\n    this.storeTimes(selectedTimes);\n  }\n\n  isActive(time:string):boolean {\n    return !this.inactiveTimes.find((inactive) => inactive.time === time);\n  }\n\n  removeTime(selectedTimes:string[], index:number):void {\n    this.inactiveTimes = this\n      .inactiveTimes\n      .filter((inactiveTime) => inactiveTime.time !== selectedTimes[index]);\n\n    this.inactiveTimes\n      .forEach((inactiveTime) => {\n        if (inactiveTime.position > index) {\n          // eslint-disable-next-line no-param-reassign\n          inactiveTime.position -= 1;\n        }\n      });\n\n    selectedTimes.splice(index, 1);\n\n    if (selectedTimes.length === 1) {\n      this.inactiveTimes = [];\n    }\n\n    // Activate the first time if none is active.\n    if (selectedTimes.length === this.inactiveTimes.length) {\n      this.inactiveTimes.shift();\n    }\n\n    this.storeTimes(selectedTimes);\n  }\n\n  toggleActive(active:boolean, index:number, selectedTimes:string[]):void {\n    if (!active) {\n      this.inactiveTimes.push({ position: index, time: selectedTimes[index] });\n    } else {\n      this.inactiveTimes = this.inactiveTimes.filter((inactiveTime) => inactiveTime.time !== selectedTimes[index]);\n    }\n\n    this.storeTimes(selectedTimes);\n  }\n\n  timeLabel(time:string):string {\n    return this\n      .I18n\n      .toTime(\n        'time.formats.time',\n        ReminderSettingsDailyTimeComponent.dateForHour(parseInt(time.split(':')[0], 10)),\n      );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isDisabled(time:string, activeTimes:string[]):boolean {\n    return activeTimes.length === 0 || (activeTimes.length === 1 && activeTimes[0] === time);\n  }\n\n  private storeTimes(selectedTimes:string[]) {\n    const times = selectedTimes\n      .filter(\n        (selected) => !this.inactiveTimes\n          .map((inactive) => inactive.time)\n          .includes(selected),\n      );\n\n    const timesForm = this.form.get('times') as FormArray;\n    timesForm.clear({ emitEvent: false });\n    times.forEach((time) => {\n      timesForm.push(new FormControl(time), { emitEvent: false });\n    });\n\n    timesForm.enable({ emitEvent: true });\n  }\n\n  private firstAvailableSuggested(selectedTimes:string[]) {\n    return this.availableTimes.find((v) => this.suggestedTimes.includes(v) && !selectedTimes.includes(v));\n  }\n\n  private firstAfterSelected(selectedTimes:string[]) {\n    const indexLastSelected = this.availableTimes.indexOf(selectedTimes[selectedTimes.length - 1]);\n\n    for (let i = indexLastSelected; i < 24 + indexLastSelected; i++) {\n      if (!selectedTimes.includes(this.availableTimes[i % 24])) {\n        return this.availableTimes[i % 24];\n      }\n    }\n\n    return null;\n  }\n\n  private static setupAvailableTimes() {\n    return Array.from({ length: 24 }, (v, i) => ReminderSettingsDailyTimeComponent\n      .dateForHour(i)\n      .toLocaleTimeString('en-US', { hour12: false, hour: 'numeric', minute: 'numeric' }));\n  }\n\n  private static dateForHour(hour:number) {\n    const currentTime = new Date();\n    currentTime.setTime(1000 * 60 * 60 * (hour - 1));\n    const convertTimeObject = new Date(moment(currentTime).utc().hours(hour).format('YYYY-MM-DDTHH:mm:ss'));\n\n    return convertTimeObject;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n} from '@angular/core';\nimport {\n  FormGroup,\n  FormGroupDirective,\n} from '@angular/forms';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport {\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'op-pause-reminders',\n  templateUrl: './pause-reminders.component.html',\n  styleUrls: ['./pause-reminders.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PauseRemindersComponent implements OnInit {\n  form:FormGroup;\n\n  selectedDates$:Observable<[string, string]>;\n\n  enabled$:Observable<boolean>;\n\n  text = {\n    label: this.I18n.t('js.reminders.settings.pause.label'),\n    date_placeholder: this.I18n.t('js.placeholders.date'),\n    first_day: this.I18n.t('js.reminders.settings.pause.first_day'),\n    last_day: this.I18n.t('js.reminders.settings.pause.first_day'),\n  };\n\n  constructor(\n    private I18n:I18nService,\n    private rootFormGroup:FormGroupDirective,\n  ) {\n  }\n\n  ngOnInit():void {\n    this.form = this.rootFormGroup.control.get('pauseReminders') as FormGroup;\n    this.selectedDates$ = this\n      .form\n      .valueChanges\n      .pipe(\n        startWith(this.form.value),\n        map((form:{ firstDay:string, lastDay:string }) => [form.firstDay, form.lastDay]),\n      );\n\n    this.enabled$ = this\n      .form\n      .valueChanges\n      .pipe(\n        startWith(this.form.value),\n        map((form:{ enabled:boolean }) => form.enabled),\n      );\n  }\n\n  setDates($event:[string, string]):void {\n    const [firstDay, lastDay] = $event;\n    this.form.patchValue({\n      firstDay,\n      lastDay,\n    });\n  }\n}\n","<ng-container [formGroup]=\"formGroup.control\">\n  <div class=\"op-form--section-header\">\n    <h5 [textContent]=\"text.title\"></h5>\n  </div>\n\n  <spot-selector-field\n    *ngFor=\"let workday of localeWorkdays; let i = index\"\n    formArrayName=\"workdays\"\n    [label]=\"workday\"\n    [control]=\"controlForLocalWorkday(workday)\"\n  >\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      [formControlName]=\"indexOfLocalWorkday(workday)\"\n    />\n  </spot-selector-field>\n\n  <op-pause-reminders></op-pause-reminders>\n</ng-container>\n","<div\n  class=\"op-pause-reminders\"\n  [formGroup]=\"form\"\n>\n  <spot-selector-field\n    class=\"op-pause-reminders--checkbox\"\n    [label]=\"text.label\"\n    [control]=\"form.get('enabled')\"\n  >\n    <input\n      slot=\"input\"\n      type=\"checkbox\"\n      formControlName=\"enabled\"\n    />\n  </spot-selector-field>\n\n  <op-range-date-picker\n    [size]=\"23\"\n    [required]=\"enabled$ | async\"\n    [disabled]=\"!(enabled$ | async)\"\n    (changed)=\"setDates($event)\"\n    [initialDates]=\"selectedDates$ | async\"\n  >\n  </op-range-date-picker>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n} from '@angular/core';\nimport {\n  FormArray,\n  FormControl,\n  FormGroupDirective,\n} from '@angular/forms';\nimport * as moment from 'moment';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\n\n@Component({\n  selector: 'op-workdays-settings',\n  templateUrl: './workdays-settings.component.html',\n  styleUrls: ['./workdays-settings.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WorkdaysSettingsComponent implements OnInit {\n  control:FormArray;\n\n  /**\n   * The locale might render workdays in a different order, which is what moment return with localeSorted\n   * and used for rendering the component.\n   */\n  localeWorkdays:string[] = moment.weekdays(true);\n\n  /**\n   * Almost* ISO workdays with localized strings.\n   * ISO workdays are 1=Monday, ... 7=Sunday which is what we persist\n   *\n   * Working with the FormArray however, we use 0=Monday, 6=Sunday and add one before saving\n   * @private\n   */\n  private isoWorkdays:string[] = WorkdaysSettingsComponent.buildISOWeekdays();\n\n  text = {\n    title: this.I18n.t('js.reminders.settings.workdays.title'),\n  };\n\n  constructor(\n    private I18n:I18nService,\n    readonly formGroup:FormGroupDirective,\n  ) {\n  }\n\n  ngOnInit():void {\n    this.control = this.formGroup.control.get('workdays') as FormArray;\n  }\n\n  indexOfLocalWorkday(day:string):number {\n    return this.isoWorkdays.indexOf(day);\n  }\n\n  controlForLocalWorkday(day:string):FormControl {\n    const index = this.indexOfLocalWorkday(day);\n    return this.control.at(index) as FormControl;\n  }\n\n  /** Workdays from moment.js are in non-ISO order, that means Sunday=0, Saturday=6 */\n  static buildISOWeekdays():string[] {\n    const days = moment.weekdays(false);\n\n    days.push(days.shift() as string);\n\n    return days;\n  }\n}\n","<div class=\"title-container\">\n  <h2 [textContent]=\"text.title\"></h2>\n</div>\n\n<form\n  *ngIf=\"formInitialized\"\n  [formGroup]=\"form\"\n  (ngSubmit)=\"saveChanges()\"\n  class=\"op-form\"\n>\n  <op-immediate-reminder-settings class=\"op-form--fieldset\"></op-immediate-reminder-settings>\n  <op-reminder-settings-daily-time class=\"op-form--fieldset\"></op-reminder-settings-daily-time>\n  <op-workdays-settings class=\"op-form--fieldset\"></op-workdays-settings>\n  <op-email-alerts-settings class=\"op-form--fieldset\"></op-email-alerts-settings>\n\n  <div class=\"op-form--submit\">\n    <button\n      class=\"button -highlight\"\n      [textContent]=\"text.save\"\n      type=\"submit\"\n    ></button>\n  </div>\n</form>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { CurrentUserService } from 'core-app/core/current-user/current-user.service';\nimport { take } from 'rxjs/internal/operators/take';\nimport { UIRouterGlobals } from '@uirouter/core';\nimport { UserPreferencesService } from 'core-app/features/user-preferences/state/user-preferences.service';\nimport {\n  FormArray,\n  FormBuilder,\n} from '@angular/forms';\nimport {\n  DailyRemindersSettings,\n  ImmediateRemindersSettings,\n  PauseRemindersSettings,\n  IUserPreference,\n} from 'core-app/features/user-preferences/state/user-preferences.model';\nimport {\n  emailAlerts,\n  EmailAlertType,\n} from 'core-app/features/user-preferences/reminder-settings/email-alerts/email-alerts-settings.component';\nimport { UntilDestroyedMixin } from 'core-app/shared/helpers/angular/until-destroyed.mixin';\nimport {\n  filter,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { filterObservable } from 'core-app/shared/helpers/rxjs/filterWith';\nimport { INotificationSetting } from 'core-app/features/user-preferences/state/notification-setting.model';\n\nexport const myReminderPageComponentSelector = 'op-reminders-page';\n\ninterface IReminderSettingsFormValue {\n  immediateReminders:ImmediateRemindersSettings,\n  dailyReminders:DailyRemindersSettings,\n  pauseReminders:Partial<PauseRemindersSettings>,\n  emailAlerts:Record<EmailAlertType, boolean>;\n  workdays:boolean[];\n}\n\n@Component({\n  selector: myReminderPageComponentSelector,\n  templateUrl: './reminder-settings-page.component.html',\n  styleUrls: ['./reminder-settings-page.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReminderSettingsPageComponent extends UntilDestroyedMixin implements OnInit {\n  @Input() userId:string;\n\n  public form = this.fb.group({\n    immediateReminders: this.fb.group({\n      mentioned: this.fb.control(false),\n    }),\n    dailyReminders: this.fb.group({\n      enabled: this.fb.control(false),\n      times: this.fb.array([]),\n    }),\n    pauseReminders: this.fb.group({\n      enabled: this.fb.control(false),\n      firstDay: this.fb.control(''),\n      lastDay: this.fb.control(''),\n    }),\n    workdays: this.fb.array([\n      this.fb.control(false),\n      this.fb.control(true),\n      this.fb.control(true),\n      this.fb.control(true),\n      this.fb.control(true),\n      this.fb.control(true),\n      this.fb.control(false),\n    ]),\n    emailAlerts: this.fb.group({\n      newsAdded: this.fb.control(false),\n      newsCommented: this.fb.control(false),\n      documentAdded: this.fb.control(false),\n      forumMessages: this.fb.control(false),\n      wikiPageAdded: this.fb.control(false),\n      wikiPageUpdated: this.fb.control(false),\n      membershipAdded: this.fb.control(false),\n      membershipUpdated: this.fb.control(false),\n    }),\n  });\n\n  text = {\n    title: this.I18n.t('js.reminders.settings.title'),\n    save: this.I18n.t('js.button_save'),\n  };\n\n  formInitialized = false;\n\n  constructor(\n    private I18n:I18nService,\n    private storeService:UserPreferencesService,\n    private currentUserService:CurrentUserService,\n    private uiRouterGlobals:UIRouterGlobals,\n    private fb:FormBuilder,\n    private cdRef:ChangeDetectorRef,\n  ) {\n    super();\n  }\n\n  ngOnInit():void {\n    this.userId = (this.userId || this.uiRouterGlobals.params.userId) as string;\n    this\n      .currentUserService\n      .user$\n      .pipe(take(1))\n      .subscribe((user) => {\n        this.userId = this.userId || user?.id as string;\n        this.storeService.get(this.userId);\n      });\n\n    this.storeService.query.select()\n      .pipe(\n        filter((settings) => !!settings),\n        withLatestFrom(this.storeService.query.globalNotification$),\n        filterObservable(this.storeService.query.selectLoading(), (val) => !val),\n      )\n      .subscribe(([settings, globalSetting]) => {\n        this.buildForm(settings, globalSetting);\n      });\n  }\n\n  private buildForm(settings:IUserPreference, globalSetting:INotificationSetting) {\n    this.form.get('immediateReminders.mentioned')?.setValue(settings.immediateReminders.mentioned);\n\n    this.form.get('dailyReminders.enabled')?.setValue(settings.dailyReminders.enabled);\n\n    this.form.get('pauseReminders')?.patchValue(settings.pauseReminders);\n\n    const dailyReminderTimes = this.form.get('dailyReminders.times') as FormArray;\n    dailyReminderTimes.clear({ emitEvent: false });\n    [...settings.dailyReminders.times].sort().forEach((time) => {\n      dailyReminderTimes.push(this.fb.control(time), { emitEvent: false });\n    });\n\n    dailyReminderTimes.enable({ emitEvent: true });\n\n    const workdays = this.form.get('workdays') as FormArray;\n    for (let i = 0; i <= 6; i++) {\n      const control = workdays.at(i);\n      control.setValue(settings.workdays.includes(i + 1));\n    }\n\n    emailAlerts.forEach((alert) => {\n      this.form.get(`emailAlerts.${alert}`)?.setValue(globalSetting[alert]);\n    });\n\n    this.formInitialized = true;\n    this.cdRef.detectChanges();\n  }\n\n  public saveChanges():void {\n    const prefs = this.storeService.query.getValue();\n    const globalNotifications = prefs.notifications.filter((notification) => !notification._links.project.href);\n    const projectNotifications = prefs.notifications.filter((notification) => !!notification._links.project.href);\n    const reminderSettings = (this.form.value as IReminderSettingsFormValue);\n    const workdays = ReminderSettingsPageComponent.buildWorkdays(reminderSettings.workdays);\n    const pauseReminders = ReminderSettingsPageComponent.buildPauses(reminderSettings.pauseReminders);\n    const { dailyReminders, immediateReminders } = reminderSettings;\n\n    this.storeService.update(this.userId, {\n      ...prefs,\n      workdays,\n      dailyReminders,\n      immediateReminders,\n      pauseReminders,\n      notifications: [\n        ...globalNotifications.map((notification) => (\n          {\n            ...notification,\n            ...reminderSettings.emailAlerts,\n          }\n        )),\n        ...projectNotifications,\n      ],\n    });\n  }\n\n  private static buildWorkdays(formValues:boolean[]):number[] {\n    return formValues\n      .reduce(\n        (result, val, index) => {\n          if (val) {\n            return result.concat([index + 1]);\n          }\n\n          return result;\n        },\n        [] as number[],\n      );\n  }\n\n  private static buildPauses(formValues:Partial<PauseRemindersSettings>):Partial<PauseRemindersSettings> {\n    if (formValues.enabled) {\n      return formValues;\n    }\n\n    return { enabled: false };\n  }\n}\n","import {\n  filter,\n  map,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n/**\n * Filter emissions from the source observable\n * using values from another observable.\n *\n * Applies the given filter function and maps to the original observable.\n *\n * @param other$ Other observable to observe values\n * @param filterFn Filter to apply to values of other$\n */\nexport function filterObservable<T, V>(\n  other$:Observable<V>,\n  filterFn:(val:V) => boolean,\n):(source$:Observable<T>) => Observable<T> {\n  return (source$) => source$\n    .pipe(\n      withLatestFrom(other$),\n      filter(([, val]) => filterFn(val)),\n      map(([source]) => source),\n    );\n}\n","// -- copyright\n// OpenProject is an open source project management software.\n// Copyright (C) 2012-2022 the OpenProject GmbH\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License version 3.\n//\n// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:\n// Copyright (C) 2006-2013 Jean-Philippe Lang\n// Copyright (C) 2010-2013 the ChiliProject Team\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License\n// as published by the Free Software Foundation; either version 2\n// of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n//\n// See COPYRIGHT and LICENSE files for more details.\n//++\n\nimport { Ng2StateDeclaration } from '@uirouter/angular';\nimport { NotificationsSettingsPageComponent } from 'core-app/features/user-preferences/notifications-settings/page/notifications-settings-page.component';\nimport { ReminderSettingsPageComponent } from './reminder-settings/page/reminder-settings-page.component';\n\nexport const MY_ACCOUNT_ROUTES:Ng2StateDeclaration[] = [\n  {\n    name: 'my_notifications',\n    url: '/my/notifications',\n    component: NotificationsSettingsPageComponent,\n  },\n  {\n    name: 'user_notifications',\n    url: '/users/:userId/edit/notifications',\n    component: NotificationsSettingsPageComponent,\n  },\n  {\n    name: 'my_reminders',\n    url: '/my/reminders',\n    component: ReminderSettingsPageComponent,\n  },\n  {\n    name: 'user_reminders',\n    url: '/users/:userId/edit/reminders',\n    component: ReminderSettingsPageComponent,\n  },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UIRouterModule } from '@uirouter/angular';\nimport {\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { OPSharedModule } from 'core-app/shared/shared.module';\nimport { OpenprojectAutocompleterModule } from 'core-app/shared/components/autocompleter/openproject-autocompleter.module';\nimport { UserPreferencesService } from 'core-app/features/user-preferences/state/user-preferences.service';\nimport { NotificationsSettingsPageComponent } from 'core-app/features/user-preferences/notifications-settings/page/notifications-settings-page.component';\nimport { NotificationSettingInlineCreateComponent } from 'core-app/features/user-preferences/notifications-settings/inline-create/notification-setting-inline-create.component';\nimport { MY_ACCOUNT_ROUTES } from 'core-app/features/user-preferences/user-preferences.routes';\nimport { NotificationsSettingsToolbarComponent } from './notifications-settings/toolbar/notifications-settings-toolbar.component';\nimport { NotificationSettingsTableComponent } from './notifications-settings/table/notification-settings-table.component';\nimport { ReminderSettingsPageComponent } from './reminder-settings/page/reminder-settings-page.component';\nimport { ReminderSettingsDailyTimeComponent } from 'core-app/features/user-preferences/reminder-settings/reminder-time/reminder-settings-daily-time.component';\nimport { ImmediateReminderSettingsComponent } from 'core-app/features/user-preferences/reminder-settings/immediate-reminders/immediate-reminder-settings.component';\nimport { EmailAlertsSettingsComponent } from 'core-app/features/user-preferences/reminder-settings/email-alerts/email-alerts-settings.component';\nimport { WorkdaysSettingsComponent } from './reminder-settings/workdays/workdays-settings.component';\nimport { PauseRemindersComponent } from './reminder-settings/pause-reminders/pause-reminders.component';\n\n@NgModule({\n  providers: [\n    UserPreferencesService,\n  ],\n  declarations: [\n    NotificationsSettingsPageComponent,\n    NotificationSettingInlineCreateComponent,\n    NotificationsSettingsToolbarComponent,\n    NotificationSettingsTableComponent,\n    ReminderSettingsPageComponent,\n    ReminderSettingsDailyTimeComponent,\n    ImmediateReminderSettingsComponent,\n    EmailAlertsSettingsComponent,\n    WorkdaysSettingsComponent,\n    PauseRemindersComponent,\n  ],\n  imports: [\n    CommonModule,\n    OPSharedModule,\n    OpenprojectAutocompleterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    // Routes for /my/*\n    UIRouterModule.forChild({\n      states: MY_ACCOUNT_ROUTES,\n    }),\n  ],\n})\nexport class OpenProjectMyAccountModule { }\n"],"sourceRoot":"webpack:///","file":"src_app_features_user-preferences_user-preferences_module_ts.da4dda17d395a3203054.js"}