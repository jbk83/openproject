{"version":3,"mappings":"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","names":["CodeMirror","defineMode","config","parserConfig","type","content","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","trackScope","isTS","typescript","wordRE","wordCharacters","keywords","style","A","kw","B","C","D","operator","atom","if","while","with","else","do","try","finally","return","break","continue","new","delete","void","throw","debugger","var","const","let","function","catch","for","switch","case","default","in","typeof","instanceof","true","false","null","undefined","NaN","Infinity","this","class","super","yield","export","import","extends","await","isOperatorChar","isJsonldKeyword","stream","next","escaped","inSet","tp","cont","state","ch","tokenize","tokenString","match","ret","test","eat","tokenComment","skipToEnd","expressionAllowed","readRegexp","current","tokenQuasi","peek","eatWhile","string","slice","start","lexical","word","lastType","propertyIsEnumerable","quote","tokenBase","maybeEnd","brackets","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","number","variable","regexp","indented","column","align","prev","info","varname","v","localVars","name","cx","context","vars","cc","marked","hasOwnProperty","length","pop","expression","statement","lex","inScope","i","arguments","push","pass","apply","list","block","newContext","registerVarScoped","inList","Var","globalVars","inner","Context","defaultVars","result","indent","outer","JSLexical","wanted","exp","value","pushlex","vardef","expect","poplex","parenExpr","maybeexpression","pushblockcontext","popcontext","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","maybelabel","pushcontext","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","classExpression","expressionNoComma","arrayLiteral","contCommasep","objprop","quasi","maybeTarget","me","expr","property","backUp","continueQuasi","findFatArrow","targetNoComma","target","maybeTypeArgs","_","getterSetter","afterprop","isModifier","maybetype","what","end","sep","proceed","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","maybetypeOrIn","functiondecl","continueQuasiType","maybeTypeDefault","maybeAssign","vardefCont","register","eltpattern","proppattern","_type","forspec1","forspec2","mayberettype","typeparam","classNameAfter","classBody","classfield","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","textAfter","startState","basecolumn","token","sol","indentation","eatSpace","parseJS","Pass","top","firstChar","c","closing","isContinuedStatement","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","StringStream","registerHelper","defineMIME","mod","require"],"sources":["./node_modules/codemirror/mode/javascript/javascript.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var trackScope = parserConfig.trackScope !== false\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    if (!trackScope) return false\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (!trackScope) return\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n    if (type == \"quasi\") { return pass(quasiType, afterType); }\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n  function continueQuasiType(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"!\") return cont(classfield)\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse && c != popcontext) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null))\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/x-json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/manifest+json\", { name: \"javascript\", json: true })\nCodeMirror.defineMIME(\"application/ld+json\", { name: \"javascript\", jsonld: true });\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n"],"sourceRoot":"webpack:///","file":"default-node_modules_codemirror_mode_javascript_javascript_js.88ab8a9581287caa2325.js"}