{"version":3,"mappings":"6KAUC,MAEDA,MAFCC,EALOC,EAAQ,OAAyBA,EAAQ,OAOjDF,YAGAC,8CACA,0BACAE,gCAEA,cACA,sBAGA,OACAC,sBACA,OACAC,QACAC,wBAGAC,sBACA,OACAF,cACAC,kCAGAE,oBACA,cACA,0BACAC,UACAC,qBAEAD,UACAA,wBACAN,oBAEU,eACV,0CACAQ,qBACA,WACAF,UACAA,yBAEAE,EAEA,2BAGAC,sBACA,OAAgBC,0BAEhBC,uBACA,WACA,8CAEAC,sBACA,WACA","names":["l","t","c","r","startState","state","inner","copyState","token","e","u","o","innerMode","mode","indent","blankLine"],"sources":["./node_modules/codemirror/mode/yaml-frontmatter/yaml-frontmatter.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../yaml/yaml\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../yaml/yaml\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function (CodeMirror) {\n\n  var START = 0, FRONTMATTER = 1, BODY = 2\n\n  // a mixed mode for Markdown text with an optional YAML front matter\n  CodeMirror.defineMode(\"yaml-frontmatter\", function (config, parserConfig) {\n    var yamlMode = CodeMirror.getMode(config, \"yaml\")\n    var innerMode = CodeMirror.getMode(config, parserConfig && parserConfig.base || \"gfm\")\n\n    function curMode(state) {\n      return state.state == BODY ? innerMode : yamlMode\n    }\n\n    return {\n      startState: function () {\n        return {\n          state: START,\n          inner: CodeMirror.startState(yamlMode)\n        }\n      },\n      copyState: function (state) {\n        return {\n          state: state.state,\n          inner: CodeMirror.copyState(curMode(state), state.inner)\n        }\n      },\n      token: function (stream, state) {\n        if (state.state == START) {\n          if (stream.match('---', false)) {\n            state.state = FRONTMATTER\n            return yamlMode.token(stream, state.inner)\n          } else {\n            state.state = BODY\n            state.inner = CodeMirror.startState(innerMode)\n            return innerMode.token(stream, state.inner)\n          }\n        } else if (state.state == FRONTMATTER) {\n          var end = stream.sol() && stream.match(/(---|\\.\\.\\.)/, false)\n          var style = yamlMode.token(stream, state.inner)\n          if (end) {\n            state.state = BODY\n            state.inner = CodeMirror.startState(innerMode)\n          }\n          return style\n        } else {\n          return innerMode.token(stream, state.inner)\n        }\n      },\n      innerMode: function (state) {\n        return {mode: curMode(state), state: state.inner}\n      },\n      indent: function(state, a, b) {\n        var mode = curMode(state)\n        return mode.indent ? mode.indent(state.inner, a, b) : CodeMirror.Pass\n      },\n      blankLine: function (state) {\n        var mode = curMode(state)\n        if (mode.blankLine) return mode.blankLine(state.inner)\n      }\n    }\n  })\n});\n"],"sourceRoot":"webpack:///","file":"node_modules_codemirror_mode_yaml-frontmatter_yaml-frontmatter_js.b30828c40c38b0c1c49b.js"}